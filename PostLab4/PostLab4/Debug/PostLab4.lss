
PostLab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800110  00800110  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000836  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e9  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053b  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e5  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014c  00000000  00000000  00001e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001f4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 c3 01 	jmp	0x386	; 0x386 <__vector_3>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_21>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  68:	df 00       	.word	0x00df	; ????
  6a:	e3 00       	.word	0x00e3	; ????
  6c:	e7 00       	.word	0x00e7	; ????
  6e:	eb 00       	.word	0x00eb	; ????
  70:	ef 00       	.word	0x00ef	; ????
  72:	f3 00       	.word	0x00f3	; ????
  74:	f7 00       	.word	0x00f7	; ????
  76:	fb 00       	.word	0x00fb	; ????
  78:	ff 00       	.word	0x00ff	; ????
  7a:	03 01       	movw	r0, r6
  7c:	07 01       	movw	r0, r14
  7e:	0b 01       	movw	r0, r22
  80:	0f 01       	movw	r0, r30
  82:	13 01       	movw	r2, r6
  84:	17 01       	movw	r2, r14
  86:	1b 01       	movw	r2, r22
  88:	45 01       	movw	r8, r10
  8a:	49 01       	movw	r8, r18
  8c:	4d 01       	movw	r8, r26
  8e:	51 01       	movw	r10, r2
  90:	55 01       	movw	r10, r10
  92:	59 01       	movw	r10, r18
  94:	5d 01       	movw	r10, r26
  96:	61 01       	movw	r12, r2
  98:	65 01       	movw	r12, r10
  9a:	69 01       	movw	r12, r18
  9c:	6d 01       	movw	r12, r26
  9e:	71 01       	movw	r14, r2
  a0:	75 01       	movw	r14, r10
  a2:	79 01       	movw	r14, r18
  a4:	7d 01       	movw	r14, r26
  a6:	81 01       	movw	r16, r2

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 ed       	ldi	r30, 0xD6	; 214
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 31       	cpi	r26, 0x10	; 16
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a0 e1       	ldi	r26, 0x10	; 16
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a7 31       	cpi	r26, 0x17	; 23
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  de:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_init>:
    }
}

void ADC_init(){
	// Seleccion de Canal ADC (A)
	ADMUX = 0x07;
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	80 83       	st	Z, r24
	
	// Utilizando AVCC = 5V internos
	ADMUX |= (1<<REFS0);
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  f4:	80 81       	ld	r24, Z
  f6:	8f 77       	andi	r24, 0x7F	; 127
  f8:	80 83       	st	Z, r24
	
	// Justificacion a la Izquierda
	ADMUX |= (1<<ADLAR);
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 100:	ea e7       	ldi	r30, 0x7A	; 122
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	10 82       	st	Z, r1
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 106:	80 81       	ld	r24, Z
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	80 83       	st	Z, r24
	
	//Habilitamos las interrupciones
	ADCSRA |= (1<<ADIE);
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 112:	80 81       	ld	r24, Z
 114:	87 60       	ori	r24, 0x07	; 7
 116:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);
 118:	ee e7       	ldi	r30, 0x7E	; 126
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <dechex>:
}

void dechex(uint8_t val){
	adcreadH = val/16;		// Divido para bits mas significativos
 124:	28 2f       	mov	r18, r24
 126:	22 95       	swap	r18
 128:	2f 70       	andi	r18, 0x0F	; 15
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <adcreadH+0x1>
 130:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <adcreadH>
	adcreadL = val%16;		// Residuo para bits menos significativos
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 13c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 140:	08 95       	ret

00000142 <main>:
uint8_t contador;


int main(void)
{
    cli();
 142:	f8 94       	cli
    ADC_init();
 144:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_init>
	
	DDRC = 0xFF;		// Puerto C como salida
 148:	9f ef       	ldi	r25, 0xFF	; 255
 14a:	97 b9       	out	0x07, r25	; 7
	PORTC = 0;			// Puerto C inicializado apagado
 14c:	18 b8       	out	0x08, r1	; 8
	
	DDRB &= ~(1<<DDB0);	// PB0 como entrada
 14e:	84 b1       	in	r24, 0x04	; 4
 150:	8e 7f       	andi	r24, 0xFE	; 254
 152:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0);	// Activamos Pull-Up
 154:	85 b1       	in	r24, 0x05	; 5
 156:	81 60       	ori	r24, 0x01	; 1
 158:	85 b9       	out	0x05, r24	; 5
	
	DDRB &= ~(1<<DDB1);	// PB1 como entrada
 15a:	84 b1       	in	r24, 0x04	; 4
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB1);	// Activamos Pull-Up
 160:	85 b1       	in	r24, 0x05	; 5
 162:	82 60       	ori	r24, 0x02	; 2
 164:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= (1<<DDB2)|(1<<DDB3)|(1<<DDB4)|(1<<DDB5);	// Salidas del Puerto B
 166:	84 b1       	in	r24, 0x04	; 4
 168:	8c 63       	ori	r24, 0x3C	; 60
 16a:	84 b9       	out	0x04, r24	; 4
	
	DDRD = 0b11111111;	// Puerto D como salida
 16c:	9a b9       	out	0x0a, r25	; 10
	
	// Configuracion de interrupcion PCINT
	PCMSK0 |= (1<<PCINT0)|(1<<PCINT1);
 16e:	eb e6       	ldi	r30, 0x6B	; 107
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	83 60       	ori	r24, 0x03	; 3
 176:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	// Habilita Interrupcion PCINT en el puerto B
 178:	e8 e6       	ldi	r30, 0x68	; 104
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 83       	st	Z, r24
    sei();
 182:	78 94       	sei
	
    while (1) 
    {
		ADCSRA |= (1<<ADSC);		// Iniciamos la conversion
 184:	ea e7       	ldi	r30, 0x7A	; 122
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 64       	ori	r24, 0x40	; 64
 18c:	80 83       	st	Z, r24
		
		// Desplegar Display 1
		dechex(adcread);
 18e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <adcread>
 192:	0e 94 92 00 	call	0x124	; 0x124 <dechex>
		//adcreadL = adcread & 0x0F;
		PORTC = lista[adcreadL];
 196:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 19a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 19e:	e0 50       	subi	r30, 0x00	; 0
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 81       	ld	r24, Z
 1a4:	88 b9       	out	0x08, r24	; 8
		switch (adcreadL)
 1a6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 1aa:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 1ae:	e0 31       	cpi	r30, 0x10	; 16
 1b0:	f1 05       	cpc	r31, r1
 1b2:	08 f0       	brcs	.+2      	; 0x1b6 <main+0x74>
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <main+0xfa>
 1b6:	ec 5c       	subi	r30, 0xCC	; 204
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__tablejump2__>
		{
			case 0:
			PORTB &= ~(1<<PORTB5);
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	85 b9       	out	0x05, r24	; 5
			break;
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <main+0xfa>
			case 1:
			PORTB &= ~(1<<PORTB5);
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	8f 7d       	andi	r24, 0xDF	; 223
 1ca:	85 b9       	out	0x05, r24	; 5
			break;
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <main+0xfa>
			case 2:
			PORTB |= (1<<PORTB5);
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	85 b9       	out	0x05, r24	; 5
			break;
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <main+0xfa>
			case 3:
			PORTB |= (1<<PORTB5);
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	85 b9       	out	0x05, r24	; 5
			break;
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <main+0xfa>
			case 4:
			PORTB |= (1<<PORTB5);
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	85 b9       	out	0x05, r24	; 5
			break;
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <main+0xfa>
			case 5:
			PORTB |= (1<<PORTB5);
 1e6:	85 b1       	in	r24, 0x05	; 5
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	85 b9       	out	0x05, r24	; 5
			break;
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <main+0xfa>
			case 6:
			PORTB |= (1<<PORTB5);
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	80 62       	ori	r24, 0x20	; 32
 1f2:	85 b9       	out	0x05, r24	; 5
			break;
 1f4:	23 c0       	rjmp	.+70     	; 0x23c <main+0xfa>
			case 7:
			PORTB &= ~(1<<PORTB5);
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	8f 7d       	andi	r24, 0xDF	; 223
 1fa:	85 b9       	out	0x05, r24	; 5
			break;
 1fc:	1f c0       	rjmp	.+62     	; 0x23c <main+0xfa>
			case 8:
			PORTB |= (1<<PORTB5);
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	80 62       	ori	r24, 0x20	; 32
 202:	85 b9       	out	0x05, r24	; 5
			break;
 204:	1b c0       	rjmp	.+54     	; 0x23c <main+0xfa>
			case 9:
			PORTB |= (1<<PORTB5);
 206:	85 b1       	in	r24, 0x05	; 5
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	85 b9       	out	0x05, r24	; 5
			break;
 20c:	17 c0       	rjmp	.+46     	; 0x23c <main+0xfa>
			case 10:
			PORTB |= (1<<PORTB5);
 20e:	85 b1       	in	r24, 0x05	; 5
 210:	80 62       	ori	r24, 0x20	; 32
 212:	85 b9       	out	0x05, r24	; 5
			break;
 214:	13 c0       	rjmp	.+38     	; 0x23c <main+0xfa>
			case 11:
			PORTB |= (1<<PORTB5);
 216:	85 b1       	in	r24, 0x05	; 5
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	85 b9       	out	0x05, r24	; 5
			break;
 21c:	0f c0       	rjmp	.+30     	; 0x23c <main+0xfa>
			case 12:
			PORTB &= ~(1<<PORTB5);
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	85 b9       	out	0x05, r24	; 5
			break;
 224:	0b c0       	rjmp	.+22     	; 0x23c <main+0xfa>
			case 13:
			PORTB |= (1<<PORTB5);
 226:	85 b1       	in	r24, 0x05	; 5
 228:	80 62       	ori	r24, 0x20	; 32
 22a:	85 b9       	out	0x05, r24	; 5
			break;
 22c:	07 c0       	rjmp	.+14     	; 0x23c <main+0xfa>
			case 14:
			PORTB |= (1<<PORTB5);
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	80 62       	ori	r24, 0x20	; 32
 232:	85 b9       	out	0x05, r24	; 5
			break;
 234:	03 c0       	rjmp	.+6      	; 0x23c <main+0xfa>
			case 15:
			PORTB |= (1<<PORTB5);
 236:	85 b1       	in	r24, 0x05	; 5
 238:	80 62       	ori	r24, 0x20	; 32
 23a:	85 b9       	out	0x05, r24	; 5
			break;
		}
		PORTB |= (1<<PORTB3);		// Encendiendo display 2
 23c:	85 b1       	in	r24, 0x05	; 5
 23e:	88 60       	ori	r24, 0x08	; 8
 240:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB2);
 242:	85 b1       	in	r24, 0x05	; 5
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e7       	ldi	r24, 0x7F	; 127
 24a:	9e e3       	ldi	r25, 0x3E	; 62
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x10a>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0x110>
 252:	00 00       	nop
		_delay_ms(4);
		PORTB &= ~(1<<PORTB3);		// Apaga display 2
 254:	85 b1       	in	r24, 0x05	; 5
 256:	87 7f       	andi	r24, 0xF7	; 247
 258:	85 b9       	out	0x05, r24	; 5
		
		// Desplegamos Display 2
		dechex(adcread);
 25a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <adcread>
 25e:	0e 94 92 00 	call	0x124	; 0x124 <dechex>
		//adcreadH = (adcread>>4) & 0x0F;
		PORTC = lista[adcreadH];
 262:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <adcreadH>
 266:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <adcreadH+0x1>
 26a:	e0 50       	subi	r30, 0x00	; 0
 26c:	ff 4f       	sbci	r31, 0xFF	; 255
 26e:	80 81       	ld	r24, Z
 270:	88 b9       	out	0x08, r24	; 8
		switch (adcreadH)
 272:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <adcreadH>
 276:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <adcreadH+0x1>
 27a:	e0 31       	cpi	r30, 0x10	; 16
 27c:	f1 05       	cpc	r31, r1
 27e:	08 f0       	brcs	.+2      	; 0x282 <main+0x140>
 280:	43 c0       	rjmp	.+134    	; 0x308 <main+0x1c6>
 282:	ec 5b       	subi	r30, 0xBC	; 188
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__tablejump2__>
		{
			case 0:
			PORTB &= ~(1<<PORTB5);
 28a:	85 b1       	in	r24, 0x05	; 5
 28c:	8f 7d       	andi	r24, 0xDF	; 223
 28e:	85 b9       	out	0x05, r24	; 5
			break;
 290:	3b c0       	rjmp	.+118    	; 0x308 <main+0x1c6>
			case 1:
			PORTB &= ~(1<<PORTB5);
 292:	85 b1       	in	r24, 0x05	; 5
 294:	8f 7d       	andi	r24, 0xDF	; 223
 296:	85 b9       	out	0x05, r24	; 5
			break;
 298:	37 c0       	rjmp	.+110    	; 0x308 <main+0x1c6>
			case 2:
			PORTB |= (1<<PORTB5);
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	80 62       	ori	r24, 0x20	; 32
 29e:	85 b9       	out	0x05, r24	; 5
			break;
 2a0:	33 c0       	rjmp	.+102    	; 0x308 <main+0x1c6>
			case 3:
			PORTB |= (1<<PORTB5);
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	80 62       	ori	r24, 0x20	; 32
 2a6:	85 b9       	out	0x05, r24	; 5
			break;
 2a8:	2f c0       	rjmp	.+94     	; 0x308 <main+0x1c6>
			case 4:
			PORTB |= (1<<PORTB5);
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	80 62       	ori	r24, 0x20	; 32
 2ae:	85 b9       	out	0x05, r24	; 5
			break;
 2b0:	2b c0       	rjmp	.+86     	; 0x308 <main+0x1c6>
			case 5:
			PORTB |= (1<<PORTB5);
 2b2:	85 b1       	in	r24, 0x05	; 5
 2b4:	80 62       	ori	r24, 0x20	; 32
 2b6:	85 b9       	out	0x05, r24	; 5
			break;
 2b8:	27 c0       	rjmp	.+78     	; 0x308 <main+0x1c6>
			case 6:
			PORTB |= (1<<PORTB5);
 2ba:	85 b1       	in	r24, 0x05	; 5
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	85 b9       	out	0x05, r24	; 5
			break;
 2c0:	23 c0       	rjmp	.+70     	; 0x308 <main+0x1c6>
			case 7:
			PORTB &= ~(1<<PORTB5);
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	8f 7d       	andi	r24, 0xDF	; 223
 2c6:	85 b9       	out	0x05, r24	; 5
			break;
 2c8:	1f c0       	rjmp	.+62     	; 0x308 <main+0x1c6>
			case 8:
			PORTB |= (1<<PORTB5);
 2ca:	85 b1       	in	r24, 0x05	; 5
 2cc:	80 62       	ori	r24, 0x20	; 32
 2ce:	85 b9       	out	0x05, r24	; 5
			break;
 2d0:	1b c0       	rjmp	.+54     	; 0x308 <main+0x1c6>
			case 9:
			PORTB |= (1<<PORTB5);
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	80 62       	ori	r24, 0x20	; 32
 2d6:	85 b9       	out	0x05, r24	; 5
			break;
 2d8:	17 c0       	rjmp	.+46     	; 0x308 <main+0x1c6>
			case 10:
			PORTB |= (1<<PORTB5);
 2da:	85 b1       	in	r24, 0x05	; 5
 2dc:	80 62       	ori	r24, 0x20	; 32
 2de:	85 b9       	out	0x05, r24	; 5
			break;
 2e0:	13 c0       	rjmp	.+38     	; 0x308 <main+0x1c6>
			case 11:
			PORTB |= (1<<PORTB5);
 2e2:	85 b1       	in	r24, 0x05	; 5
 2e4:	80 62       	ori	r24, 0x20	; 32
 2e6:	85 b9       	out	0x05, r24	; 5
			break;
 2e8:	0f c0       	rjmp	.+30     	; 0x308 <main+0x1c6>
			case 12:
			PORTB &= ~(1<<PORTB5);
 2ea:	85 b1       	in	r24, 0x05	; 5
 2ec:	8f 7d       	andi	r24, 0xDF	; 223
 2ee:	85 b9       	out	0x05, r24	; 5
			break;
 2f0:	0b c0       	rjmp	.+22     	; 0x308 <main+0x1c6>
			case 13:
			PORTB |= (1<<PORTB5);
 2f2:	85 b1       	in	r24, 0x05	; 5
 2f4:	80 62       	ori	r24, 0x20	; 32
 2f6:	85 b9       	out	0x05, r24	; 5
			break;
 2f8:	07 c0       	rjmp	.+14     	; 0x308 <main+0x1c6>
			case 14:
			PORTB |= (1<<PORTB5);
 2fa:	85 b1       	in	r24, 0x05	; 5
 2fc:	80 62       	ori	r24, 0x20	; 32
 2fe:	85 b9       	out	0x05, r24	; 5
			break;
 300:	03 c0       	rjmp	.+6      	; 0x308 <main+0x1c6>
			case 15:
			PORTB |= (1<<PORTB5);
 302:	85 b1       	in	r24, 0x05	; 5
 304:	80 62       	ori	r24, 0x20	; 32
 306:	85 b9       	out	0x05, r24	; 5
			break;
		}
		
		PORTB |= (1<<PORTB2);		// Encendemos display 1
 308:	85 b1       	in	r24, 0x05	; 5
 30a:	84 60       	ori	r24, 0x04	; 4
 30c:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1<<PORTB3);		// Apaga display 2
 30e:	85 b1       	in	r24, 0x05	; 5
 310:	87 7f       	andi	r24, 0xF7	; 247
 312:	85 b9       	out	0x05, r24	; 5
 314:	8f e7       	ldi	r24, 0x7F	; 127
 316:	9e e3       	ldi	r25, 0x3E	; 62
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <main+0x1d6>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x1dc>
 31e:	00 00       	nop
		_delay_ms(4);
		PORTB &= ~(1<<PORTB2);		// Apagamos display 1
 320:	85 b1       	in	r24, 0x05	; 5
 322:	8b 7f       	andi	r24, 0xFB	; 251
 324:	85 b9       	out	0x05, r24	; 5
		
		
		if (adcread > contador){
 326:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <adcread>
 330:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <adcread+0x1>
 334:	82 17       	cp	r24, r18
 336:	93 07       	cpc	r25, r19
 338:	24 f4       	brge	.+8      	; 0x342 <main+0x200>
			PORTB |= (1<<PORTB4);
 33a:	85 b1       	in	r24, 0x05	; 5
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	85 b9       	out	0x05, r24	; 5
 340:	21 cf       	rjmp	.-446    	; 0x184 <main+0x42>
		} else{
			PORTB &= ~(1<<PORTB4);
 342:	85 b1       	in	r24, 0x05	; 5
 344:	8f 7e       	andi	r24, 0xEF	; 239
 346:	85 b9       	out	0x05, r24	; 5
 348:	1d cf       	rjmp	.-454    	; 0x184 <main+0x42>

0000034a <__vector_21>:
void dechex(uint8_t val){
	adcreadH = val/16;		// Divido para bits mas significativos
	adcreadL = val%16;		// Residuo para bits menos significativos
}

ISR(ADC_vect){
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
	adcread = ADCH;		// Guardamos el valor
 35c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <adcread+0x1>
 366:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <adcread>
	ADCSRA |= (1<<ADIF);		// Apagamos bandera de interrupcion
 36a:	ea e7       	ldi	r30, 0x7A	; 122
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	80 61       	ori	r24, 0x10	; 16
 372:	80 83       	st	Z, r24
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	0f 90       	pop	r0
 37e:	0f be       	out	0x3f, r0	; 63
 380:	0f 90       	pop	r0
 382:	1f 90       	pop	r1
 384:	18 95       	reti

00000386 <__vector_3>:

ISR(PCINT0_vect){
 386:	1f 92       	push	r1
 388:	0f 92       	push	r0
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	0f 92       	push	r0
 38e:	11 24       	eor	r1, r1
 390:	8f 93       	push	r24
	if (!(PINB & (1<<PINB0)))	// PB0 = 0?
 392:	18 99       	sbic	0x03, 0	; 3
 394:	08 c0       	rjmp	.+16     	; 0x3a6 <__vector_3+0x20>
	{
		if (contador < 255)		// Si el contador llega a 255 que se quede ahi
 396:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 39a:	8f 3f       	cpi	r24, 0xFF	; 255
 39c:	21 f0       	breq	.+8      	; 0x3a6 <__vector_3+0x20>
		{
			contador = contador + 1;	// Incrementa el contador en uno en uno
 39e:	8f 5f       	subi	r24, 0xFF	; 255
 3a0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <contador>
			PORTD = contador;	// Muestra el valor del contador
 3a4:	8b b9       	out	0x0b, r24	; 11
		}
	}
	
	if (!(PINB & (1<<PINB1)))	// PB1 = 0?
 3a6:	19 99       	sbic	0x03, 1	; 3
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <__vector_3+0x34>
	{
		if (contador > 0)		// Si el contador llega a 0 que no se pase
 3aa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <contador>
 3ae:	88 23       	and	r24, r24
 3b0:	21 f0       	breq	.+8      	; 0x3ba <__vector_3+0x34>
		{
			contador = contador - 1;	// Decrementa el contador en uno en uno
 3b2:	81 50       	subi	r24, 0x01	; 1
 3b4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <contador>
			PORTD = contador;		// Muestra el valor del contador
 3b8:	8b b9       	out	0x0b, r24	; 11
		}
	}
}
 3ba:	8f 91       	pop	r24
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__tablejump2__>:
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	05 90       	lpm	r0, Z+
 3cc:	f4 91       	lpm	r31, Z
 3ce:	e0 2d       	mov	r30, r0
 3d0:	09 94       	ijmp

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
