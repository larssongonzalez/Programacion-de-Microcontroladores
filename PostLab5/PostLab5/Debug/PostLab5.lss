
PostLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000747  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  00000ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000369  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039e  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000194e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 23 01 	jmp	0x246	; 0x246 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
}

void initT0(){
	TCCR0B |= (1<<CS02)|(1<<CS00);
	TCNT0 = 100;
	TIMSK0 = (1<<TOIE0); 
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
  96:	80 81       	ld	r24, Z
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	80 83       	st	Z, r24
  9c:	80 81       	ld	r24, Z
  9e:	8f 77       	andi	r24, 0x7F	; 127
  a0:	80 83       	st	Z, r24
  a2:	80 81       	ld	r24, Z
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	80 83       	st	Z, r24
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
  b4:	80 81       	ld	r24, Z
  b6:	88 60       	ori	r24, 0x08	; 8
  b8:	80 83       	st	Z, r24
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <main>:
  c2:	f8 94       	cli
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8a 60       	ori	r24, 0x0A	; 10
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	8a b9       	out	0x0a, r24	; 10
  d0:	a0 e8       	ldi	r26, 0x80	; 128
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	1c 92       	st	X, r1
  d6:	e1 e8       	ldi	r30, 0x81	; 129
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	10 82       	st	Z, r1
  dc:	8c 91       	ld	r24, X
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8c 93       	st	X, r24
  e2:	8c 91       	ld	r24, X
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	8c 93       	st	X, r24
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
  ee:	80 81       	ld	r24, Z
  f0:	85 60       	ori	r24, 0x05	; 5
  f2:	80 83       	st	Z, r24
  f4:	e0 eb       	ldi	r30, 0xB0	; 176
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
  fa:	a1 eb       	ldi	r26, 0xB1	; 177
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	1c 92       	st	X, r1
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	80 83       	st	Z, r24
 10c:	8c 91       	ld	r24, X
 10e:	87 60       	ori	r24, 0x07	; 7
 110:	8c 93       	st	X, r24
 112:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
 116:	78 94       	sei
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <adcread1>
 126:	2b ea       	ldi	r18, 0xAB	; 171
 128:	82 9f       	mul	r24, r18
 12a:	81 2d       	mov	r24, r1
 12c:	11 24       	eor	r1, r1
 12e:	86 95       	lsr	r24
 130:	86 95       	lsr	r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 138:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 13c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <adcread2>
 140:	82 9f       	mul	r24, r18
 142:	81 2d       	mov	r24, r1
 144:	11 24       	eor	r1, r1
 146:	86 95       	lsr	r24
 148:	86 95       	lsr	r24
 14a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	81 11       	cpse	r24, r1
 154:	04 c0       	rjmp	.+8      	; 0x15e <main+0x9c>
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	80 61       	ori	r24, 0x10	; 16
 15a:	8b b9       	out	0x0b, r24	; 11
 15c:	dd cf       	rjmp	.-70     	; 0x118 <main+0x56>
 15e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <adcread3>
 162:	89 13       	cpse	r24, r25
 164:	d9 cf       	rjmp	.-78     	; 0x118 <main+0x56>
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	8f 7e       	andi	r24, 0xEF	; 239
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	d5 cf       	rjmp	.-86     	; 0x118 <main+0x56>

0000016e <__vector_16>:
}

//************************************************************
// ISR
//************************************************************
ISR(TIMER0_OVF_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	if (canalADC==0){
 17e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <canalADC>
 182:	81 11       	cpse	r24, r1
 184:	0c c0       	rjmp	.+24     	; 0x19e <__vector_16+0x30>
		
		canalADC = 1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <canalADC>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 18c:	ec e7       	ldi	r30, 0x7C	; 124
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 7f       	andi	r24, 0xF8	; 248
 194:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1)|(1<<MUX2);
 196:	80 81       	ld	r24, Z
 198:	86 60       	ori	r24, 0x06	; 6
 19a:	80 83       	st	Z, r24
 19c:	17 c0       	rjmp	.+46     	; 0x1cc <__vector_16+0x5e>
		
		} else if (canalADC==1){
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	61 f4       	brne	.+24     	; 0x1ba <__vector_16+0x4c>
		
		canalADC = 2;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <canalADC>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 1a8:	ec e7       	ldi	r30, 0x7C	; 124
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 7f       	andi	r24, 0xF8	; 248
 1b0:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX0)|(1<<MUX1)|(1<<MUX2);
 1b2:	80 81       	ld	r24, Z
 1b4:	87 60       	ori	r24, 0x07	; 7
 1b6:	80 83       	st	Z, r24
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <__vector_16+0x5e>
		
		} else if (canalADC==2){
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	39 f4       	brne	.+14     	; 0x1cc <__vector_16+0x5e>
		
		canalADC = 0;
 1be:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <canalADC>
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2));
 1c2:	ec e7       	ldi	r30, 0x7C	; 124
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	88 7f       	andi	r24, 0xF8	; 248
 1ca:	80 83       	st	Z, r24
		
	}
	
	ADCSRA |= (1<<ADSC);
 1cc:	ea e7       	ldi	r30, 0x7A	; 122
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	80 83       	st	Z, r24
	TCNT0 = 100;
 1d6:	84 e6       	ldi	r24, 0x64	; 100
 1d8:	86 bd       	out	0x26, r24	; 38
	TIFR0 |= (1<<TOV0);
 1da:	85 b3       	in	r24, 0x15	; 21
 1dc:	81 60       	ori	r24, 0x01	; 1
 1de:	85 bb       	out	0x15, r24	; 21
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_21>:

ISR(ADC_vect){
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	11 24       	eor	r1, r1
 1fa:	8f 93       	push	r24
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
	if (canalADC==0){
 200:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <canalADC>
 204:	81 11       	cpse	r24, r1
 206:	05 c0       	rjmp	.+10     	; 0x212 <__vector_21+0x22>
		adcread1 = ADCH;
 208:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 20c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adcread1>
 210:	0d c0       	rjmp	.+26     	; 0x22c <__vector_21+0x3c>
	} else if (canalADC==1){
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	29 f4       	brne	.+10     	; 0x220 <__vector_21+0x30>
		adcread2 = ADCH;
 216:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 21a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adcread2>
 21e:	06 c0       	rjmp	.+12     	; 0x22c <__vector_21+0x3c>
	} else if (canalADC==2){
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	21 f4       	brne	.+8      	; 0x22c <__vector_21+0x3c>
		adcread3 = ADCH;
 224:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 228:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adcread3>
	}
	ADCSRA |= (1 << ADIF);	//turn off flag
 22c:	ea e7       	ldi	r30, 0x7A	; 122
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 61       	ori	r24, 0x10	; 16
 234:	80 83       	st	Z, r24
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <_exit>:
 246:	f8 94       	cli

00000248 <__stop_program>:
 248:	ff cf       	rjmp	.-2      	; 0x248 <__stop_program>
