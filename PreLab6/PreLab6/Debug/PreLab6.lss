
PreLab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00000554  000005e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000554  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080018c  0080018c  00000674  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3b  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071f  00000000  00000000  0000116f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055b  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d4  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_18>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_21>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	63 01       	movw	r12, r6
  6a:	68 01       	movw	r12, r16
  6c:	6d 01       	movw	r12, r26
  6e:	72 01       	movw	r14, r4
  70:	77 01       	movw	r14, r14
  72:	7c 01       	movw	r14, r24
  74:	81 01       	movw	r16, r2
  76:	86 01       	movw	r16, r12
  78:	8b 01       	movw	r16, r22
  7a:	90 01       	movw	r18, r0
  7c:	9d 01       	movw	r18, r26
  7e:	a2 01       	movw	r20, r4
  80:	a7 01       	movw	r20, r14
  82:	ac 01       	movw	r20, r24
  84:	b1 01       	movw	r22, r2
  86:	b6 01       	movw	r22, r12
  88:	bb 01       	movw	r22, r22
  8a:	c0 01       	movw	r24, r0
  8c:	c5 01       	movw	r24, r10
  8e:	ca 01       	movw	r24, r20
  90:	d7 01       	movw	r26, r14
  92:	dc 01       	movw	r26, r24
  94:	e1 01       	movw	r28, r2
  96:	e6 01       	movw	r28, r12
  98:	eb 01       	movw	r28, r22
  9a:	f0 01       	movw	r30, r0
  9c:	f5 01       	movw	r30, r10
  9e:	fa 01       	movw	r30, r20
  a0:	ff 01       	movw	r30, r30
  a2:	04 02       	muls	r16, r20

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e4 e5       	ldi	r30, 0x54	; 84
  b8:	f5 e0       	ldi	r31, 0x05	; 5
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	ac 38       	cpi	r26, 0x8C	; 140
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	ac e8       	ldi	r26, 0x8C	; 140
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a4 39       	cpi	r26, 0x94	; 148
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  da:	0c 94 a8 02 	jmp	0x550	; 0x550 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <initADC>:
//************************************************
// Functions
//************************************************
void initADC(){
	// Seleccion de Canal ADC (A)
	ADMUX = 6;
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	80 83       	st	Z, r24
	
	// Utilizando AVCC = 5V internos
	ADMUX |= (1<<REFS0);
  ea:	80 81       	ld	r24, Z
  ec:	80 64       	ori	r24, 0x40	; 64
  ee:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  f0:	80 81       	ld	r24, Z
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	80 83       	st	Z, r24
	
	// Justificacion a la Izquierda
	ADMUX |= (1<<ADLAR);
  f6:	80 81       	ld	r24, Z
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	10 82       	st	Z, r1
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 102:	80 81       	ld	r24, Z
 104:	80 68       	ori	r24, 0x80	; 128
 106:	80 83       	st	Z, r24
	
	//Habilitamos las interrupciones
	ADCSRA |= (1<<ADIE);
 108:	80 81       	ld	r24, Z
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	80 83       	st	Z, r24
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 10e:	80 81       	ld	r24, Z
 110:	87 60       	ori	r24, 0x07	; 7
 112:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);
 114:	ee e7       	ldi	r30, 0x7E	; 126
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <initUART>:
}
/****************Funcion de inicio****************/
void initUART(void){	
	DDRD &= ~(1<<DDD0);		// RX como entrada
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);		// TX como salida
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	8a b9       	out	0x0a, r24	; 10
	
	// Configuration UCSR0A
	UCSR0A = 0;
 12c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	// Configuration UCSR0B when enable ISR Reception, enable RX and TX
	UCSR0B = 0;
 130:	e1 ec       	ldi	r30, 0xC1	; 193
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); 
 136:	80 81       	ld	r24, Z
 138:	88 69       	ori	r24, 0x98	; 152
 13a:	80 83       	st	Z, r24
	
	// Configuration UCSR0C - Mode asynchronous, Parity = None, One bit Stop, Data bits = 8bits
	UCSR0C = 0;
 13c:	e2 ec       	ldi	r30, 0xC2	; 194
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 142:	80 81       	ld	r24, Z
 144:	86 60       	ori	r24, 0x06	; 6
 146:	80 83       	st	Z, r24
	
	// Configuration velocity baudrate = 9600B
	UBRR0 = 103;
 148:	87 e6       	ldi	r24, 0x67	; 103
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 150:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 154:	08 95       	ret

00000156 <writeTextUART>:
}

/****************Funcion de Escritura de una cadena de Caracteres****************/
void writeTextUART(char * Texto){
 156:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0; Texto[i]!='\0'; i++){
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	07 c0       	rjmp	.+14     	; 0x16a <writeTextUART+0x14>
		while (!(UCSR0A & (1<<UDRE0)));
 15c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 160:	95 ff       	sbrs	r25, 5
 162:	fc cf       	rjmp	.-8      	; 0x15c <writeTextUART+0x6>
		UDR0 = Texto[i];
 164:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

/****************Funcion de Escritura de una cadena de Caracteres****************/
void writeTextUART(char * Texto){
	uint8_t i;
	for (i=0; Texto[i]!='\0'; i++){
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	fa 01       	movw	r30, r20
 16c:	e2 0f       	add	r30, r18
 16e:	f1 1d       	adc	r31, r1
 170:	30 81       	ld	r19, Z
 172:	31 11       	cpse	r19, r1
 174:	f3 cf       	rjmp	.-26     	; 0x15c <writeTextUART+0x6>
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i];
	}
}
 176:	08 95       	ret

00000178 <writeUART>:

/****************Funcion de Escritura de un Caracter****************/
void writeUART(char caracter){
	while (!(UCSR0A & (1<<UDRE0)));
 178:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 17c:	95 ff       	sbrs	r25, 5
 17e:	fc cf       	rjmp	.-8      	; 0x178 <writeUART>
	UDR0 = caracter;
 180:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 184:	08 95       	ret

00000186 <main>:
// Setup
//************************************************
int main(void)
{
    
	cli();
 186:	f8 94       	cli
	
	DDRC = 0xFF;
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	87 b9       	out	0x07, r24	; 7
	DDRB |= (1<<DDB4)|(1<<DDB5);
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	80 63       	ori	r24, 0x30	; 48
 190:	84 b9       	out	0x04, r24	; 4
	
	initUART();
 192:	0e 94 90 00 	call	0x120	; 0x120 <initUART>
	initADC();
 196:	0e 94 71 00 	call	0xe2	; 0xe2 <initADC>
	
	
	sei();
 19a:	78 94       	sei
	//********************************************
	// Loop
	//********************************************
    while (1){
		
		ADCSRA |= (1<<ADSC);
 19c:	ea e7       	ldi	r30, 0x7A	; 122
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	80 83       	st	Z, r24
		
		if (activar == 0)
 1a6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__data_end>
 1aa:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <__data_end+0x1>
 1ae:	89 2b       	or	r24, r25
 1b0:	91 f4       	brne	.+36     	; 0x1d6 <main+0x50>
		{
			writeTextUART("\n\r--------Menu--------\n\r");
 1b2:	8a e0       	ldi	r24, 0x0A	; 10
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 ab 00 	call	0x156	; 0x156 <writeTextUART>
			writeTextUART("1. Leer Potenciometro\n\r");
 1ba:	83 e2       	ldi	r24, 0x23	; 35
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 ab 00 	call	0x156	; 0x156 <writeTextUART>
			writeTextUART("2. Enviar ASCII\n\r");
 1c2:	8b e3       	ldi	r24, 0x3B	; 59
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 ab 00 	call	0x156	; 0x156 <writeTextUART>
			
			activar = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__data_end+0x1>
 1d2:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__data_end>
		}
		 
		if (readchar != 0){
 1d6:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <readchar>
 1da:	88 23       	and	r24, r24
 1dc:	f9 f2       	breq	.-66     	; 0x19c <main+0x16>
			switch(readchar){
 1de:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <readchar>
 1e2:	81 33       	cpi	r24, 0x31	; 49
 1e4:	21 f0       	breq	.+8      	; 0x1ee <main+0x68>
 1e6:	82 33       	cpi	r24, 0x32	; 50
 1e8:	09 f4       	brne	.+2      	; 0x1ec <main+0x66>
 1ea:	19 c1       	rjmp	.+562    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 1ec:	d7 cf       	rjmp	.-82     	; 0x19c <main+0x16>
				case '1':
				writeTextUART("Mueve el Potenciometro");
 1ee:	8d e4       	ldi	r24, 0x4D	; 77
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 ab 00 	call	0x156	; 0x156 <writeTextUART>
				writeTextUART("Su valor actual es: ");
 1f6:	84 e6       	ldi	r24, 0x64	; 100
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 ab 00 	call	0x156	; 0x156 <writeTextUART>
				
				uint8_t lbits = dato & 0b00111111; 
 1fe:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <dato>
 202:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <dato+0x1>
 206:	28 2f       	mov	r18, r24
 208:	2f 73       	andi	r18, 0x3F	; 63
				uint8_t hbits = (dato>>6) & 0b11;
 20a:	08 2e       	mov	r0, r24
 20c:	89 2f       	mov	r24, r25
 20e:	00 0c       	add	r0, r0
 210:	88 1f       	adc	r24, r24
 212:	99 0b       	sbc	r25, r25
 214:	00 0c       	add	r0, r0
 216:	88 1f       	adc	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	83 70       	andi	r24, 0x03	; 3
				
				PORTC = lbits;
 21c:	28 b9       	out	0x08, r18	; 8
				
				PORTB = (PORTB & ~0b00110000) | (hbits<<6);
 21e:	25 b1       	in	r18, 0x05	; 5
 220:	30 e4       	ldi	r19, 0x40	; 64
 222:	83 9f       	mul	r24, r19
 224:	c0 01       	movw	r24, r0
 226:	11 24       	eor	r1, r1
 228:	92 2f       	mov	r25, r18
 22a:	9f 7c       	andi	r25, 0xCF	; 207
 22c:	89 2b       	or	r24, r25
 22e:	85 b9       	out	0x05, r24	; 5
				
				int millares = dato/1000;
 230:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <dato>
 234:	30 91 93 01 	lds	r19, 0x0193	; 0x800193 <dato+0x1>
 238:	08 ee       	ldi	r16, 0xE8	; 232
 23a:	13 e0       	ldi	r17, 0x03	; 3
 23c:	c9 01       	movw	r24, r18
 23e:	b8 01       	movw	r22, r16
 240:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__divmodhi4>
 244:	7b 01       	movw	r14, r22
				int centenas = (dato-(millares*1000))/100;
 246:	48 e1       	ldi	r20, 0x18	; 24
 248:	5c ef       	ldi	r21, 0xFC	; 252
 24a:	64 9f       	mul	r22, r20
 24c:	c0 01       	movw	r24, r0
 24e:	65 9f       	mul	r22, r21
 250:	90 0d       	add	r25, r0
 252:	74 9f       	mul	r23, r20
 254:	90 0d       	add	r25, r0
 256:	11 24       	eor	r1, r1
 258:	82 0f       	add	r24, r18
 25a:	93 1f       	adc	r25, r19
 25c:	64 e6       	ldi	r22, 0x64	; 100
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__divmodhi4>
 264:	fb 01       	movw	r30, r22
				int decenas = (dato-(millares*1000 + centenas*100))/10;
 266:	e0 9e       	mul	r14, r16
 268:	e0 01       	movw	r28, r0
 26a:	e1 9e       	mul	r14, r17
 26c:	d0 0d       	add	r29, r0
 26e:	f0 9e       	mul	r15, r16
 270:	d0 0d       	add	r29, r0
 272:	11 24       	eor	r1, r1
 274:	44 e6       	ldi	r20, 0x64	; 100
 276:	46 9f       	mul	r20, r22
 278:	c0 01       	movw	r24, r0
 27a:	47 9f       	mul	r20, r23
 27c:	90 0d       	add	r25, r0
 27e:	11 24       	eor	r1, r1
 280:	c8 0f       	add	r28, r24
 282:	d9 1f       	adc	r29, r25
 284:	c9 01       	movw	r24, r18
 286:	8c 1b       	sub	r24, r28
 288:	9d 0b       	sbc	r25, r29
 28a:	6a e0       	ldi	r22, 0x0A	; 10
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__divmodhi4>
 292:	8b 01       	movw	r16, r22
				int unidades = dato-(millares*1000 + centenas*100 + decenas*10);
 294:	cb 01       	movw	r24, r22
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	ab 01       	movw	r20, r22
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	84 0f       	add	r24, r20
 2aa:	95 1f       	adc	r25, r21
 2ac:	8c 0f       	add	r24, r28
 2ae:	9d 1f       	adc	r25, r29
 2b0:	e9 01       	movw	r28, r18
 2b2:	c8 1b       	sub	r28, r24
 2b4:	d9 0b       	sbc	r29, r25
				switch(centenas){
 2b6:	f0 97       	sbiw	r30, 0x30	; 48
 2b8:	ea 30       	cpi	r30, 0x0A	; 10
 2ba:	f1 05       	cpc	r31, r1
 2bc:	a8 f5       	brcc	.+106    	; 0x328 <main+0x1a2>
 2be:	ec 5c       	subi	r30, 0xCC	; 204
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__tablejump2__>
					case '0':
						writeUART(lista[0]);
 2c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2ca:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 2ce:	2c c0       	rjmp	.+88     	; 0x328 <main+0x1a2>
					
					case '1':
						writeUART(lista[1]);
 2d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2d4:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 2d8:	27 c0       	rjmp	.+78     	; 0x328 <main+0x1a2>
					
					case '2':
						writeUART(lista[2]);
 2da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 2de:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 2e2:	22 c0       	rjmp	.+68     	; 0x328 <main+0x1a2>
					
					case '3':
						writeUART(lista[3]);
 2e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 2e8:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 2ec:	1d c0       	rjmp	.+58     	; 0x328 <main+0x1a2>
					
					case '4':
						writeUART(lista[4]);
 2ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 2f2:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 2f6:	18 c0       	rjmp	.+48     	; 0x328 <main+0x1a2>
					
					case '5':
						writeUART(lista[5]);
 2f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 2fc:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 300:	13 c0       	rjmp	.+38     	; 0x328 <main+0x1a2>
					
					case '6':
						writeUART(lista[6]);
 302:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 306:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 30a:	0e c0       	rjmp	.+28     	; 0x328 <main+0x1a2>
					
					case '7':
						writeUART(lista[7]);
 30c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 310:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 314:	09 c0       	rjmp	.+18     	; 0x328 <main+0x1a2>
					
					case '8':
						writeUART(lista[8]);
 316:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 31a:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 31e:	04 c0       	rjmp	.+8      	; 0x328 <main+0x1a2>
					
					case '9':
						writeUART(lista[9]);
 320:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 324:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
				}
				
				switch(decenas){
 328:	f8 01       	movw	r30, r16
 32a:	f0 97       	sbiw	r30, 0x30	; 48
 32c:	ea 30       	cpi	r30, 0x0A	; 10
 32e:	f1 05       	cpc	r31, r1
 330:	a8 f5       	brcc	.+106    	; 0x39c <main+0x216>
 332:	e2 5c       	subi	r30, 0xC2	; 194
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__tablejump2__>
					case '0':
						writeUART(lista[0]);
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33e:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 342:	2c c0       	rjmp	.+88     	; 0x39c <main+0x216>
					
					case '1':
						writeUART(lista[1]);
 344:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 348:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 34c:	27 c0       	rjmp	.+78     	; 0x39c <main+0x216>
					
					case '2':
						writeUART(lista[2]);
 34e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 352:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 356:	22 c0       	rjmp	.+68     	; 0x39c <main+0x216>
					
					case '3':
						writeUART(lista[3]);
 358:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 35c:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 360:	1d c0       	rjmp	.+58     	; 0x39c <main+0x216>
					
					case '4':
						writeUART(lista[4]);
 362:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 366:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 36a:	18 c0       	rjmp	.+48     	; 0x39c <main+0x216>
					
					case '5':
						writeUART(lista[5]);
 36c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 370:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 374:	13 c0       	rjmp	.+38     	; 0x39c <main+0x216>
					
					case '6':
						writeUART(lista[6]);
 376:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 37a:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 37e:	0e c0       	rjmp	.+28     	; 0x39c <main+0x216>
					
					case '7':
						writeUART(lista[7]);
 380:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 384:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 388:	09 c0       	rjmp	.+18     	; 0x39c <main+0x216>
					
					case '8':
						writeUART(lista[8]);
 38a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 38e:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 392:	04 c0       	rjmp	.+8      	; 0x39c <main+0x216>
					
					case '9':
						writeUART(lista[9]);
 394:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 398:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
				}
				
				switch(unidades){
 39c:	fe 01       	movw	r30, r28
 39e:	f0 97       	sbiw	r30, 0x30	; 48
 3a0:	ea 30       	cpi	r30, 0x0A	; 10
 3a2:	f1 05       	cpc	r31, r1
 3a4:	a8 f5       	brcc	.+106    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3a6:	e8 5b       	subi	r30, 0xB8	; 184
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__tablejump2__>
					case '0':
						writeUART(lista[0]);
 3ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b2:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3b6:	2c c0       	rjmp	.+88     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '1':
						writeUART(lista[1]);
 3b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3bc:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3c0:	27 c0       	rjmp	.+78     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '2':
						writeUART(lista[2]);
 3c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3c6:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3ca:	22 c0       	rjmp	.+68     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '3':
						writeUART(lista[3]);
 3cc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3d0:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3d4:	1d c0       	rjmp	.+58     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '4':
						writeUART(lista[4]);
 3d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 3da:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3de:	18 c0       	rjmp	.+48     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '5':
						writeUART(lista[5]);
 3e0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 3e4:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '6':
						writeUART(lista[6]);
 3ea:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 3ee:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '7':
						writeUART(lista[7]);
 3f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
 3f8:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '8':
						writeUART(lista[8]);
 3fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
 402:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
 406:	04 c0       	rjmp	.+8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
					
					case '9':
						writeUART(lista[9]);
 408:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
 40c:	0e 94 bc 00 	call	0x178	; 0x178 <writeUART>
						break;
				}
				
					activar = 0;
 410:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__data_end+0x1>
 414:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end>
					readchar = 0;
 418:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <readchar>
				break;
 41c:	bf ce       	rjmp	.-642    	; 0x19c <main+0x16>
				
				case '2':
				readchar = 0;
 41e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <readchar>
				writeTextUART("\n\rIngresa Texto\n\r");
 422:	89 e7       	ldi	r24, 0x79	; 121
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	0e 94 ab 00 	call	0x156	; 0x156 <writeTextUART>
				activar1 = 1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <activar1+0x1>
 432:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <activar1>
				break;
 436:	b2 ce       	rjmp	.-668    	; 0x19c <main+0x16>

00000438 <__vector_18>:


//************************************************
// ISR
//************************************************
ISR(USART_RX_vect){
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	2f 93       	push	r18
 444:	3f 93       	push	r19
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
	readchar = UDR0;
 44a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 44e:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <readchar>
	
	if (activar1==1){
 452:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <activar1>
 456:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <activar1+0x1>
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	e1 f4       	brne	.+56     	; 0x496 <__vector_18+0x5e>
		uint8_t lbits = readchar & 0b00111111;
 45e:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <readchar>
 462:	2f 73       	andi	r18, 0x3F	; 63
		uint8_t hbits = (readchar>>6) & 0b11;
 464:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <readchar>
 468:	98 2f       	mov	r25, r24
 46a:	92 95       	swap	r25
 46c:	96 95       	lsr	r25
 46e:	96 95       	lsr	r25
 470:	93 70       	andi	r25, 0x03	; 3
		
		PORTC = lbits;
 472:	28 b9       	out	0x08, r18	; 8
		
		PORTB = (PORTB & ~0b11000000)|(hbits<<6);
 474:	25 b1       	in	r18, 0x05	; 5
 476:	30 e4       	ldi	r19, 0x40	; 64
 478:	93 9f       	mul	r25, r19
 47a:	c0 01       	movw	r24, r0
 47c:	11 24       	eor	r1, r1
 47e:	92 2f       	mov	r25, r18
 480:	9f 73       	andi	r25, 0x3F	; 63
 482:	89 2b       	or	r24, r25
 484:	85 b9       	out	0x05, r24	; 5
		activar1 = 0;
 486:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <activar1+0x1>
 48a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <activar1>
		activar = 0;
 48e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <__data_end+0x1>
 492:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <__data_end>
	}
	
	while(!(UCSR0A & (1<<UDRE0)));
 496:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 49a:	85 ff       	sbrs	r24, 5
 49c:	fc cf       	rjmp	.-8      	; 0x496 <__vector_18+0x5e>
		
	UDR0 = readchar;
 49e:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <readchar>
 4a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <__vector_21>:

ISR(ADC_vect){
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	ef 93       	push	r30
 4c8:	ff 93       	push	r31
	dato = ADCH;
 4ca:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <dato+0x1>
 4d4:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <dato>
	ADCSRA |= (1<<ADIF);
 4d8:	ea e7       	ldi	r30, 0x7A	; 122
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	80 61       	ori	r24, 0x10	; 16
 4e0:	80 83       	st	Z, r24
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	9f 91       	pop	r25
 4e8:	8f 91       	pop	r24
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__divmodhi4>:
 4f4:	97 fb       	bst	r25, 7
 4f6:	07 2e       	mov	r0, r23
 4f8:	16 f4       	brtc	.+4      	; 0x4fe <__divmodhi4+0xa>
 4fa:	00 94       	com	r0
 4fc:	07 d0       	rcall	.+14     	; 0x50c <__divmodhi4_neg1>
 4fe:	77 fd       	sbrc	r23, 7
 500:	09 d0       	rcall	.+18     	; 0x514 <__divmodhi4_neg2>
 502:	0e 94 94 02 	call	0x528	; 0x528 <__udivmodhi4>
 506:	07 fc       	sbrc	r0, 7
 508:	05 d0       	rcall	.+10     	; 0x514 <__divmodhi4_neg2>
 50a:	3e f4       	brtc	.+14     	; 0x51a <__divmodhi4_exit>

0000050c <__divmodhi4_neg1>:
 50c:	90 95       	com	r25
 50e:	81 95       	neg	r24
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <__divmodhi4_neg2>:
 514:	70 95       	com	r23
 516:	61 95       	neg	r22
 518:	7f 4f       	sbci	r23, 0xFF	; 255

0000051a <__divmodhi4_exit>:
 51a:	08 95       	ret

0000051c <__tablejump2__>:
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	05 90       	lpm	r0, Z+
 522:	f4 91       	lpm	r31, Z
 524:	e0 2d       	mov	r30, r0
 526:	09 94       	ijmp

00000528 <__udivmodhi4>:
 528:	aa 1b       	sub	r26, r26
 52a:	bb 1b       	sub	r27, r27
 52c:	51 e1       	ldi	r21, 0x11	; 17
 52e:	07 c0       	rjmp	.+14     	; 0x53e <__udivmodhi4_ep>

00000530 <__udivmodhi4_loop>:
 530:	aa 1f       	adc	r26, r26
 532:	bb 1f       	adc	r27, r27
 534:	a6 17       	cp	r26, r22
 536:	b7 07       	cpc	r27, r23
 538:	10 f0       	brcs	.+4      	; 0x53e <__udivmodhi4_ep>
 53a:	a6 1b       	sub	r26, r22
 53c:	b7 0b       	sbc	r27, r23

0000053e <__udivmodhi4_ep>:
 53e:	88 1f       	adc	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	5a 95       	dec	r21
 544:	a9 f7       	brne	.-22     	; 0x530 <__udivmodhi4_loop>
 546:	80 95       	com	r24
 548:	90 95       	com	r25
 54a:	bc 01       	movw	r22, r24
 54c:	cd 01       	movw	r24, r26
 54e:	08 95       	ret

00000550 <_exit>:
 550:	f8 94       	cli

00000552 <__stop_program>:
 552:	ff cf       	rjmp	.-2      	; 0x552 <__stop_program>
