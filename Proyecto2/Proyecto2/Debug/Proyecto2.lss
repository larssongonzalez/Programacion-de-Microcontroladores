
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b12  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000b86  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fa5  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000971  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000780  00000000  00000000  000025f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afa  00000000  00000000  00003583  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000407d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 90 00 	call	0x120	; 0x120 <main>
  88:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:

/*****************************************************************
* Funciones
******************************************************************/
void initADC(void){
	ADMUX |= (1<<REFS0);	// VREF = AVCC
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);	// VREF = AVCC
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<ADLAR);	// 10bits  
  a0:	80 81       	ld	r24, Z
  a2:	8f 7d       	andi	r24, 0xDF	; 223
  a4:	80 83       	st	Z, r24
	
	// Prescaler 128 - 16M/128 = 125kHz
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADEN);	// ON ADC
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	
	// DESABILITAR ENTRADAS DIGITALES DE PC0, PC1 Y PC2.
	DIDR0 |= (1<<ADC0D)|(1<<ADC1D)|(1<<ADC2D);	
  b6:	ee e7       	ldi	r30, 0x7E	; 126
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	87 60       	ori	r24, 0x07	; 7
  be:	80 83       	st	Z, r24
  c0:	08 95       	ret

000000c2 <adcread>:
}

uint16_t adcread(uint8_t canal){
	ADMUX = (ADMUX & 0xF0)|canal;	// SELECCIONA EL CANAL A USAR 
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	89 2b       	or	r24, r25
  cc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);	// INICIA LA CONVERSION DEL ADC
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
	while ((ADCSRA)&(1<<ADSC));	// BUCLE DE QUE HASTA QUE FINALICE LA CONVERSION
  d8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	86 fd       	sbrc	r24, 6
  de:	fc cf       	rjmp	.-8      	; 0xd8 <adcread+0x16>
	return(ADC);
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  e8:	08 95       	ret

000000ea <initUART>:

void initUART(void){
	DDRD &= ~(1<<DDD0);		// RX como entrada
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);		// TX como salida
  f0:	8a b1       	in	r24, 0x0a	; 10
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	8a b9       	out	0x0a, r24	; 10
	
	// Configuration UCSR0A
	UCSR0A = 0;
  f6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	
	// Configuration UCSR0B when enable ISR Reception, enable RX and TX
	UCSR0B = 0;
  fa:	e1 ec       	ldi	r30, 0xC1	; 193
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 100:	80 81       	ld	r24, Z
 102:	88 69       	ori	r24, 0x98	; 152
 104:	80 83       	st	Z, r24
	
	// Configuration UCSR0C - Mode asynchronous, Parity = None, One bit Stop, Data bits = 8bits
	UCSR0C = 0;
 106:	e2 ec       	ldi	r30, 0xC2	; 194
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 10c:	80 81       	ld	r24, Z
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	80 83       	st	Z, r24
	
	// Configuration velocity baudrate = 9600B
	UBRR0 = 103;
 112:	87 e6       	ldi	r24, 0x67	; 103
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 11a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 11e:	08 95       	ret

00000120 <main>:
	//DDRB |= (1<<DDB3);		// OC2A
	//DDRD |= (1<<DDD6);		// OC0A
	//DDRD |= (1<<DDD5);		// OC0B
	
	/*Salidas de Leds*/
	DDRD |= (1<<DDD2);
 120:	8a b1       	in	r24, 0x0a	; 10
 122:	84 60       	ori	r24, 0x04	; 4
 124:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD4);
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	80 61       	ori	r24, 0x10	; 16
 12a:	8a b9       	out	0x0a, r24	; 10
	/*Entradas de botones*/
	//DDRD &= ~(1<<DDD5);		// BOTON DE CAMBIO DE ESTADO - 1. MANUAL 2. EEPROM
	//DDRD &= ~(1<<DDD6);		// BOTON DE ESCRITURA EN EEPROM
	//DDRD &= ~(1<<DDD7);		// BOTON DE LECTURA EN EEPROM
	
	initADC();
 12c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initUART();
 130:	0e 94 75 00 	call	0xea	; 0xea <initUART>
	PWM0_init();
 134:	0e 94 14 01 	call	0x228	; 0x228 <PWM0_init>
	initPWM1();
 138:	0e 94 9f 01 	call	0x33e	; 0x33e <initPWM1>
	initPWM2A(No_invertido, 1024);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	74 e0       	ldi	r23, 0x04	; 4
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 7d 02 	call	0x4fa	; 0x4fa <initPWM2A>
	initPWM2B(No_invertido, 1024);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	74 e0       	ldi	r23, 0x04	; 4
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 9f 02 	call	0x53e	; 0x53e <initPWM2B>
	
    while (1) 
    {
		
		
		adcV1  = adcread(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 61 00 	call	0xc2	; 0xc2 <adcread>
 156:	bc 01       	movw	r22, r24
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__floatunsisf>
 160:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <adcV1>
 164:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <adcV1+0x1>
 168:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <adcV1+0x2>
 16c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <adcV1+0x3>
		writecanalA(adcV1);
 170:	0e 94 19 02 	call	0x432	; 0x432 <writecanalA>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	8f e3       	ldi	r24, 0x3F	; 63
 176:	9c e9       	ldi	r25, 0x9C	; 156
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x58>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x5e>
 17e:	00 00       	nop
		_delay_ms(10);
		
		adcV2 = adcread(1);
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 61 00 	call	0xc2	; 0xc2 <adcread>
 186:	bc 01       	movw	r22, r24
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__floatunsisf>
 190:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <adcV2>
 194:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <adcV2+0x1>
 198:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <adcV2+0x2>
 19c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <adcV2+0x3>
		writecanalB(adcV2);
 1a0:	0e 94 4b 02 	call	0x496	; 0x496 <writecanalB>
 1a4:	8f e3       	ldi	r24, 0x3F	; 63
 1a6:	9c e9       	ldi	r25, 0x9C	; 156
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x88>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x8e>
 1ae:	00 00       	nop
		_delay_ms(10);
		
		duty1 = adcread(2);
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 61 00 	call	0xc2	; 0xc2 <adcread>
 1b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <duty1>
		updateDutyCA2(duty1);
 1ba:	0e 94 20 03 	call	0x640	; 0x640 <updateDutyCA2>
 1be:	8f e3       	ldi	r24, 0x3F	; 63
 1c0:	9c e9       	ldi	r25, 0x9C	; 156
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0xa2>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0xa8>
 1c8:	00 00       	nop
		_delay_ms(10);
		
		duty2 = adcread(3);
 1ca:	83 e0       	ldi	r24, 0x03	; 3
 1cc:	0e 94 61 00 	call	0xc2	; 0xc2 <adcread>
 1d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		dutycycle = map0(duty2, 0, 1024, 0, 180);
 1d4:	68 2f       	mov	r22, r24
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__floatunsisf>
 1e0:	23 e4       	ldi	r18, 0x43	; 67
 1e2:	2f 93       	push	r18
 1e4:	24 e3       	ldi	r18, 0x34	; 52
 1e6:	2f 93       	push	r18
 1e8:	1f 92       	push	r1
 1ea:	1f 92       	push	r1
 1ec:	a1 2c       	mov	r10, r1
 1ee:	b1 2c       	mov	r11, r1
 1f0:	65 01       	movw	r12, r10
 1f2:	e1 2c       	mov	r14, r1
 1f4:	f1 2c       	mov	r15, r1
 1f6:	00 e8       	ldi	r16, 0x80	; 128
 1f8:	14 e4       	ldi	r17, 0x44	; 68
 1fa:	a6 01       	movw	r20, r12
 1fc:	95 01       	movw	r18, r10
 1fe:	0e 94 40 01 	call	0x280	; 0x280 <map0>
 202:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <dutycycle>
 206:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <dutycycle+0x1>
 20a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutycycle+0x2>
 20e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <dutycycle+0x3>
		PWM0_dca(dutycycle, no_invertido);
 212:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 216:	86 2f       	mov	r24, r22
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	0e 94 27 01 	call	0x24e	; 0x24e <PWM0_dca>
 21e:	0f 90       	pop	r0
 220:	0f 90       	pop	r0
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	94 cf       	rjmp	.-216    	; 0x150 <main+0x30>

00000228 <PWM0_init>:
	{
		TCCR0A |= (1<<COM0B1);
		TCCR0A |= (1<<COM0B0);
		
	}
	OCR0B = (dc * 255) / 100;
 228:	85 b5       	in	r24, 0x25	; 37
 22a:	87 7f       	andi	r24, 0xF7	; 247
 22c:	85 bd       	out	0x25, r24	; 37
 22e:	84 b5       	in	r24, 0x24	; 36
 230:	82 60       	ori	r24, 0x02	; 2
 232:	84 bd       	out	0x24, r24	; 36
 234:	84 b5       	in	r24, 0x24	; 36
 236:	81 60       	ori	r24, 0x01	; 1
 238:	84 bd       	out	0x24, r24	; 36
 23a:	85 b5       	in	r24, 0x25	; 37
 23c:	8b 7f       	andi	r24, 0xFB	; 251
 23e:	85 bd       	out	0x25, r24	; 37
 240:	85 b5       	in	r24, 0x25	; 37
 242:	82 60       	ori	r24, 0x02	; 2
 244:	85 bd       	out	0x25, r24	; 37
 246:	85 b5       	in	r24, 0x25	; 37
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	85 bd       	out	0x25, r24	; 37
 24c:	08 95       	ret

0000024e <PWM0_dca>:
 24e:	61 30       	cpi	r22, 0x01	; 1
 250:	39 f4       	brne	.+14     	; 0x260 <PWM0_dca+0x12>
 252:	94 b5       	in	r25, 0x24	; 36
 254:	90 68       	ori	r25, 0x80	; 128
 256:	94 bd       	out	0x24, r25	; 36
 258:	94 b5       	in	r25, 0x24	; 36
 25a:	9f 7b       	andi	r25, 0xBF	; 191
 25c:	94 bd       	out	0x24, r25	; 36
 25e:	06 c0       	rjmp	.+12     	; 0x26c <PWM0_dca+0x1e>
 260:	94 b5       	in	r25, 0x24	; 36
 262:	90 68       	ori	r25, 0x80	; 128
 264:	94 bd       	out	0x24, r25	; 36
 266:	94 b5       	in	r25, 0x24	; 36
 268:	90 64       	ori	r25, 0x40	; 64
 26a:	94 bd       	out	0x24, r25	; 36
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	82 9f       	mul	r24, r18
 270:	c0 01       	movw	r24, r0
 272:	11 24       	eor	r1, r1
 274:	64 e6       	ldi	r22, 0x64	; 100
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	0e 94 5f 05 	call	0xabe	; 0xabe <__divmodhi4>
 27c:	67 bd       	out	0x27, r22	; 39
 27e:	08 95       	ret

00000280 <map0>:
}

float map0(float x, float in_min, float in_max, float out_min, float out_max){
 280:	4f 92       	push	r4
 282:	5f 92       	push	r5
 284:	6f 92       	push	r6
 286:	7f 92       	push	r7
 288:	af 92       	push	r10
 28a:	bf 92       	push	r11
 28c:	cf 92       	push	r12
 28e:	df 92       	push	r13
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	28 97       	sbiw	r28, 0x08	; 8
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
 2ac:	29 01       	movw	r4, r18
 2ae:	3a 01       	movw	r6, r20
 2b0:	ed 82       	std	Y+5, r14	; 0x05
 2b2:	fe 82       	std	Y+6, r15	; 0x06
 2b4:	0f 83       	std	Y+7, r16	; 0x07
 2b6:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 2b8:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 2bc:	69 83       	std	Y+1, r22	; 0x01
 2be:	7a 83       	std	Y+2, r23	; 0x02
 2c0:	8b 83       	std	Y+3, r24	; 0x03
 2c2:	9c 83       	std	Y+4, r25	; 0x04
 2c4:	a6 01       	movw	r20, r12
 2c6:	95 01       	movw	r18, r10
 2c8:	69 8d       	ldd	r22, Y+25	; 0x19
 2ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
 2cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2d0:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	69 81       	ldd	r22, Y+1	; 0x01
 2da:	7a 81       	ldd	r23, Y+2	; 0x02
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	9c 81       	ldd	r25, Y+4	; 0x04
 2e0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 2e4:	69 83       	std	Y+1, r22	; 0x01
 2e6:	7a 83       	std	Y+2, r23	; 0x02
 2e8:	8b 83       	std	Y+3, r24	; 0x03
 2ea:	9c 83       	std	Y+4, r25	; 0x04
 2ec:	a3 01       	movw	r20, r6
 2ee:	92 01       	movw	r18, r4
 2f0:	c8 01       	movw	r24, r16
 2f2:	b7 01       	movw	r22, r14
 2f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 2f8:	9b 01       	movw	r18, r22
 2fa:	ac 01       	movw	r20, r24
 2fc:	69 81       	ldd	r22, Y+1	; 0x01
 2fe:	7a 81       	ldd	r23, Y+2	; 0x02
 300:	8b 81       	ldd	r24, Y+3	; 0x03
 302:	9c 81       	ldd	r25, Y+4	; 0x04
 304:	0e 94 c3 03 	call	0x786	; 0x786 <__divsf3>
 308:	9b 01       	movw	r18, r22
 30a:	ac 01       	movw	r20, r24
 30c:	c6 01       	movw	r24, r12
 30e:	b5 01       	movw	r22, r10
 310:	0e 94 57 03 	call	0x6ae	; 0x6ae <__addsf3>
 314:	28 96       	adiw	r28, 0x08	; 8
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	df 90       	pop	r13
 32e:	cf 90       	pop	r12
 330:	bf 90       	pop	r11
 332:	af 90       	pop	r10
 334:	7f 90       	pop	r7
 336:	6f 90       	pop	r6
 338:	5f 90       	pop	r5
 33a:	4f 90       	pop	r4
 33c:	08 95       	ret

0000033e <initPWM1>:
 */ 

#include "PWM1.h"

void initPWM1(void){
	DDRB |= (1<<DDB1);
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	82 60       	ori	r24, 0x02	; 2
 342:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<DDB2);	//CONFIGURATION OUTPUT PB1 AND PB2
 344:	84 b1       	in	r24, 0x04	; 4
 346:	84 60       	ori	r24, 0x04	; 4
 348:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(0<<COM1A0);
 34a:	e0 e8       	ldi	r30, 0x80	; 128
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 ea       	ldi	r24, 0xA0	; 160
 350:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11)|(0<<WGM10);
 352:	80 81       	ld	r24, Z
 354:	82 60       	ori	r24, 0x02	; 2
 356:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM13)|(1<<WGM12);
 358:	e1 e8       	ldi	r30, 0x81	; 129
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	88 e1       	ldi	r24, 0x18	; 24
 35e:	80 83       	st	Z, r24
	TCCR1B |= (0<<CS12)|(1<<CS11)|(0<<CS10);	// Prescaler de 8
 360:	80 81       	ld	r24, Z
 362:	82 60       	ori	r24, 0x02	; 2
 364:	80 83       	st	Z, r24
	ICR1 = 39999;	// VALOR TOP DE ICR1
 366:	8f e3       	ldi	r24, 0x3F	; 63
 368:	9c e9       	ldi	r25, 0x9C	; 156
 36a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 36e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 372:	08 95       	ret

00000374 <map1>:

void writecanalB(float adcV){
	OCR1B = map1(adcV, 0, 1024, 1000, 4800);
}

float map1(float x, float in_min, float in_max, float out_min, float out_max){
 374:	4f 92       	push	r4
 376:	5f 92       	push	r5
 378:	6f 92       	push	r6
 37a:	7f 92       	push	r7
 37c:	af 92       	push	r10
 37e:	bf 92       	push	r11
 380:	cf 92       	push	r12
 382:	df 92       	push	r13
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	0f 93       	push	r16
 38a:	1f 93       	push	r17
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	28 97       	sbiw	r28, 0x08	; 8
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	de bf       	out	0x3e, r29	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	cd bf       	out	0x3d, r28	; 61
 3a0:	29 01       	movw	r4, r18
 3a2:	3a 01       	movw	r6, r20
 3a4:	ed 82       	std	Y+5, r14	; 0x05
 3a6:	fe 82       	std	Y+6, r15	; 0x06
 3a8:	0f 83       	std	Y+7, r16	; 0x07
 3aa:	18 87       	std	Y+8, r17	; 0x08
	return((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 3ac:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 3b0:	69 83       	std	Y+1, r22	; 0x01
 3b2:	7a 83       	std	Y+2, r23	; 0x02
 3b4:	8b 83       	std	Y+3, r24	; 0x03
 3b6:	9c 83       	std	Y+4, r25	; 0x04
 3b8:	a6 01       	movw	r20, r12
 3ba:	95 01       	movw	r18, r10
 3bc:	69 8d       	ldd	r22, Y+25	; 0x19
 3be:	7a 8d       	ldd	r23, Y+26	; 0x1a
 3c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 3c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3c4:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 3c8:	9b 01       	movw	r18, r22
 3ca:	ac 01       	movw	r20, r24
 3cc:	69 81       	ldd	r22, Y+1	; 0x01
 3ce:	7a 81       	ldd	r23, Y+2	; 0x02
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	9c 81       	ldd	r25, Y+4	; 0x04
 3d4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 3d8:	69 83       	std	Y+1, r22	; 0x01
 3da:	7a 83       	std	Y+2, r23	; 0x02
 3dc:	8b 83       	std	Y+3, r24	; 0x03
 3de:	9c 83       	std	Y+4, r25	; 0x04
 3e0:	a3 01       	movw	r20, r6
 3e2:	92 01       	movw	r18, r4
 3e4:	c8 01       	movw	r24, r16
 3e6:	b7 01       	movw	r22, r14
 3e8:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 3ec:	9b 01       	movw	r18, r22
 3ee:	ac 01       	movw	r20, r24
 3f0:	69 81       	ldd	r22, Y+1	; 0x01
 3f2:	7a 81       	ldd	r23, Y+2	; 0x02
 3f4:	8b 81       	ldd	r24, Y+3	; 0x03
 3f6:	9c 81       	ldd	r25, Y+4	; 0x04
 3f8:	0e 94 c3 03 	call	0x786	; 0x786 <__divsf3>
 3fc:	9b 01       	movw	r18, r22
 3fe:	ac 01       	movw	r20, r24
 400:	c6 01       	movw	r24, r12
 402:	b5 01       	movw	r22, r10
 404:	0e 94 57 03 	call	0x6ae	; 0x6ae <__addsf3>
 408:	28 96       	adiw	r28, 0x08	; 8
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	df 90       	pop	r13
 422:	cf 90       	pop	r12
 424:	bf 90       	pop	r11
 426:	af 90       	pop	r10
 428:	7f 90       	pop	r7
 42a:	6f 90       	pop	r6
 42c:	5f 90       	pop	r5
 42e:	4f 90       	pop	r4
 430:	08 95       	ret

00000432 <writecanalA>:
	TCCR1B = (1<<WGM13)|(1<<WGM12);
	TCCR1B |= (0<<CS12)|(1<<CS11)|(0<<CS10);	// Prescaler de 8
	ICR1 = 39999;	// VALOR TOP DE ICR1
}

void writecanalA(float adcV){
 432:	af 92       	push	r10
 434:	bf 92       	push	r11
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
	OCR1A = map1(adcV, 0, 1024, 1000, 4800);
 442:	25 e4       	ldi	r18, 0x45	; 69
 444:	2f 93       	push	r18
 446:	26 e9       	ldi	r18, 0x96	; 150
 448:	2f 93       	push	r18
 44a:	1f 92       	push	r1
 44c:	1f 92       	push	r1
 44e:	0f 2e       	mov	r0, r31
 450:	a1 2c       	mov	r10, r1
 452:	b1 2c       	mov	r11, r1
 454:	fa e7       	ldi	r31, 0x7A	; 122
 456:	cf 2e       	mov	r12, r31
 458:	f4 e4       	ldi	r31, 0x44	; 68
 45a:	df 2e       	mov	r13, r31
 45c:	f0 2d       	mov	r31, r0
 45e:	e1 2c       	mov	r14, r1
 460:	f1 2c       	mov	r15, r1
 462:	00 e8       	ldi	r16, 0x80	; 128
 464:	14 e4       	ldi	r17, 0x44	; 68
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	a9 01       	movw	r20, r18
 46c:	0e 94 ba 01 	call	0x374	; 0x374 <map1>
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 47c:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 480:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	df 90       	pop	r13
 48e:	cf 90       	pop	r12
 490:	bf 90       	pop	r11
 492:	af 90       	pop	r10
 494:	08 95       	ret

00000496 <writecanalB>:

void writecanalB(float adcV){
 496:	af 92       	push	r10
 498:	bf 92       	push	r11
 49a:	cf 92       	push	r12
 49c:	df 92       	push	r13
 49e:	ef 92       	push	r14
 4a0:	ff 92       	push	r15
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
	OCR1B = map1(adcV, 0, 1024, 1000, 4800);
 4a6:	25 e4       	ldi	r18, 0x45	; 69
 4a8:	2f 93       	push	r18
 4aa:	26 e9       	ldi	r18, 0x96	; 150
 4ac:	2f 93       	push	r18
 4ae:	1f 92       	push	r1
 4b0:	1f 92       	push	r1
 4b2:	0f 2e       	mov	r0, r31
 4b4:	a1 2c       	mov	r10, r1
 4b6:	b1 2c       	mov	r11, r1
 4b8:	fa e7       	ldi	r31, 0x7A	; 122
 4ba:	cf 2e       	mov	r12, r31
 4bc:	f4 e4       	ldi	r31, 0x44	; 68
 4be:	df 2e       	mov	r13, r31
 4c0:	f0 2d       	mov	r31, r0
 4c2:	e1 2c       	mov	r14, r1
 4c4:	f1 2c       	mov	r15, r1
 4c6:	00 e8       	ldi	r16, 0x80	; 128
 4c8:	14 e4       	ldi	r17, 0x44	; 68
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	a9 01       	movw	r20, r18
 4d0:	0e 94 ba 01 	call	0x374	; 0x374 <map1>
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 4e0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 4e4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
}
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	ff 90       	pop	r15
 4ee:	ef 90       	pop	r14
 4f0:	df 90       	pop	r13
 4f2:	cf 90       	pop	r12
 4f4:	bf 90       	pop	r11
 4f6:	af 90       	pop	r10
 4f8:	08 95       	ret

000004fa <initPWM2A>:
 */ 

#include "PWM2.h"

void initPWM2A(uint8_t inverted, uint16_t prescaler){
	DDRB |= (1 << DDB3); //PD6 COMO SALIDA
 4fa:	94 b1       	in	r25, 0x04	; 4
 4fc:	98 60       	ori	r25, 0x08	; 8
 4fe:	94 b9       	out	0x04, r25	; 4
	TCCR2A |= (1 << WGM21)|(1 << WGM20); //PWM MODO FAST
 500:	e0 eb       	ldi	r30, 0xB0	; 176
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	90 81       	ld	r25, Z
 506:	93 60       	ori	r25, 0x03	; 3
 508:	90 83       	st	Z, r25
	
	if (inverted) {
 50a:	88 23       	and	r24, r24
 50c:	21 f0       	breq	.+8      	; 0x516 <initPWM2A+0x1c>
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);//PWM INVERTIDO
 50e:	80 81       	ld	r24, Z
 510:	80 6c       	ori	r24, 0xC0	; 192
 512:	80 83       	st	Z, r24
 514:	05 c0       	rjmp	.+10     	; 0x520 <initPWM2A+0x26>
		} else	 {
		TCCR2A |= (1 << COM2A1);//PWM NO INVERTIDO
 516:	e0 eb       	ldi	r30, 0xB0	; 176
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	80 68       	ori	r24, 0x80	; 128
 51e:	80 83       	st	Z, r24
	}

	if (prescaler == 1024) {
 520:	61 15       	cp	r22, r1
 522:	74 40       	sbci	r23, 0x04	; 4
 524:	31 f4       	brne	.+12     	; 0x532 <initPWM2A+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 526:	e1 eb       	ldi	r30, 0xB1	; 177
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	87 60       	ori	r24, 0x07	; 7
 52e:	80 83       	st	Z, r24
 530:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 532:	e1 eb       	ldi	r30, 0xB1	; 177
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	80 83       	st	Z, r24
 53c:	08 95       	ret

0000053e <initPWM2B>:
	}
}

void initPWM2B(uint8_t inverted, uint16_t prescaler){
	DDRD |= (1 << DDD3); //PD6 COMO SALIDA
 53e:	9a b1       	in	r25, 0x0a	; 10
 540:	98 60       	ori	r25, 0x08	; 8
 542:	9a b9       	out	0x0a, r25	; 10
	TCCR2A |= (1 << WGM21)|(1 << WGM20); //PWM MODO FAST
 544:	e0 eb       	ldi	r30, 0xB0	; 176
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	90 81       	ld	r25, Z
 54a:	93 60       	ori	r25, 0x03	; 3
 54c:	90 83       	st	Z, r25
	
	if (inverted) {
 54e:	88 23       	and	r24, r24
 550:	21 f0       	breq	.+8      	; 0x55a <initPWM2B+0x1c>
		TCCR2A |= (1 << COM2A1)|(1 << COM2A0);//PWM INVERTIDO
 552:	80 81       	ld	r24, Z
 554:	80 6c       	ori	r24, 0xC0	; 192
 556:	80 83       	st	Z, r24
 558:	05 c0       	rjmp	.+10     	; 0x564 <initPWM2B+0x26>
		} else	 {
		TCCR2A |= (1 << COM2A1);//PWM NO INVERTIDO
 55a:	e0 eb       	ldi	r30, 0xB0	; 176
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	80 68       	ori	r24, 0x80	; 128
 562:	80 83       	st	Z, r24
	}

	if (prescaler == 1024) {
 564:	61 15       	cp	r22, r1
 566:	74 40       	sbci	r23, 0x04	; 4
 568:	31 f4       	brne	.+12     	; 0x576 <initPWM2B+0x38>
		TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);
 56a:	e1 eb       	ldi	r30, 0xB1	; 177
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	87 60       	ori	r24, 0x07	; 7
 572:	80 83       	st	Z, r24
 574:	08 95       	ret
		} else {
		TCCR2B |= (1 << CS20);
 576:	e1 eb       	ldi	r30, 0xB1	; 177
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	81 60       	ori	r24, 0x01	; 1
 57e:	80 83       	st	Z, r24
 580:	08 95       	ret

00000582 <map2>:
void updateDutyCB2(uint8_t duty){
	OCR2B = map2(duty,0,255,6,36);
}


float map2(float x, float in_min, float in_max, float out_min, float out_max){
 582:	4f 92       	push	r4
 584:	5f 92       	push	r5
 586:	6f 92       	push	r6
 588:	7f 92       	push	r7
 58a:	af 92       	push	r10
 58c:	bf 92       	push	r11
 58e:	cf 92       	push	r12
 590:	df 92       	push	r13
 592:	ef 92       	push	r14
 594:	ff 92       	push	r15
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	28 97       	sbiw	r28, 0x08	; 8
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	f8 94       	cli
 5a8:	de bf       	out	0x3e, r29	; 62
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	cd bf       	out	0x3d, r28	; 61
 5ae:	29 01       	movw	r4, r18
 5b0:	3a 01       	movw	r6, r20
 5b2:	ed 82       	std	Y+5, r14	; 0x05
 5b4:	fe 82       	std	Y+6, r15	; 0x06
 5b6:	0f 83       	std	Y+7, r16	; 0x07
 5b8:	18 87       	std	Y+8, r17	; 0x08
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
 5ba:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 5be:	69 83       	std	Y+1, r22	; 0x01
 5c0:	7a 83       	std	Y+2, r23	; 0x02
 5c2:	8b 83       	std	Y+3, r24	; 0x03
 5c4:	9c 83       	std	Y+4, r25	; 0x04
 5c6:	a6 01       	movw	r20, r12
 5c8:	95 01       	movw	r18, r10
 5ca:	69 8d       	ldd	r22, Y+25	; 0x19
 5cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
 5ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
 5d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
 5d2:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 5d6:	9b 01       	movw	r18, r22
 5d8:	ac 01       	movw	r20, r24
 5da:	69 81       	ldd	r22, Y+1	; 0x01
 5dc:	7a 81       	ldd	r23, Y+2	; 0x02
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	9c 81       	ldd	r25, Y+4	; 0x04
 5e2:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 5e6:	69 83       	std	Y+1, r22	; 0x01
 5e8:	7a 83       	std	Y+2, r23	; 0x02
 5ea:	8b 83       	std	Y+3, r24	; 0x03
 5ec:	9c 83       	std	Y+4, r25	; 0x04
 5ee:	a3 01       	movw	r20, r6
 5f0:	92 01       	movw	r18, r4
 5f2:	c8 01       	movw	r24, r16
 5f4:	b7 01       	movw	r22, r14
 5f6:	0e 94 56 03 	call	0x6ac	; 0x6ac <__subsf3>
 5fa:	9b 01       	movw	r18, r22
 5fc:	ac 01       	movw	r20, r24
 5fe:	69 81       	ldd	r22, Y+1	; 0x01
 600:	7a 81       	ldd	r23, Y+2	; 0x02
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	9c 81       	ldd	r25, Y+4	; 0x04
 606:	0e 94 c3 03 	call	0x786	; 0x786 <__divsf3>
 60a:	9b 01       	movw	r18, r22
 60c:	ac 01       	movw	r20, r24
 60e:	c6 01       	movw	r24, r12
 610:	b5 01       	movw	r22, r10
 612:	0e 94 57 03 	call	0x6ae	; 0x6ae <__addsf3>
 616:	28 96       	adiw	r28, 0x08	; 8
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	df 90       	pop	r13
 630:	cf 90       	pop	r12
 632:	bf 90       	pop	r11
 634:	af 90       	pop	r10
 636:	7f 90       	pop	r7
 638:	6f 90       	pop	r6
 63a:	5f 90       	pop	r5
 63c:	4f 90       	pop	r4
 63e:	08 95       	ret

00000640 <updateDutyCA2>:
		} else {
		TCCR2B |= (1 << CS20);
	}
}

void updateDutyCA2(uint8_t duty){
 640:	af 92       	push	r10
 642:	bf 92       	push	r11
 644:	cf 92       	push	r12
 646:	df 92       	push	r13
 648:	ef 92       	push	r14
 64a:	ff 92       	push	r15
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
	OCR2A = map2(duty,0,255,6,36);
 650:	68 2f       	mov	r22, r24
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 64 04 	call	0x8c8	; 0x8c8 <__floatunsisf>
 65c:	22 e4       	ldi	r18, 0x42	; 66
 65e:	2f 93       	push	r18
 660:	20 e1       	ldi	r18, 0x10	; 16
 662:	2f 93       	push	r18
 664:	1f 92       	push	r1
 666:	1f 92       	push	r1
 668:	0f 2e       	mov	r0, r31
 66a:	a1 2c       	mov	r10, r1
 66c:	b1 2c       	mov	r11, r1
 66e:	f0 ec       	ldi	r31, 0xC0	; 192
 670:	cf 2e       	mov	r12, r31
 672:	f0 e4       	ldi	r31, 0x40	; 64
 674:	df 2e       	mov	r13, r31
 676:	f0 2d       	mov	r31, r0
 678:	e1 2c       	mov	r14, r1
 67a:	f1 2c       	mov	r15, r1
 67c:	0f e7       	ldi	r16, 0x7F	; 127
 67e:	13 e4       	ldi	r17, 0x43	; 67
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	a9 01       	movw	r20, r18
 686:	0e 94 c1 02 	call	0x582	; 0x582 <map2>
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0e 94 35 04 	call	0x86a	; 0x86a <__fixunssfsi>
 696:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
}
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	ff 90       	pop	r15
 6a0:	ef 90       	pop	r14
 6a2:	df 90       	pop	r13
 6a4:	cf 90       	pop	r12
 6a6:	bf 90       	pop	r11
 6a8:	af 90       	pop	r10
 6aa:	08 95       	ret

000006ac <__subsf3>:
 6ac:	50 58       	subi	r21, 0x80	; 128

000006ae <__addsf3>:
 6ae:	bb 27       	eor	r27, r27
 6b0:	aa 27       	eor	r26, r26
 6b2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__addsf3x>
 6b6:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 6ba:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 6be:	38 f0       	brcs	.+14     	; 0x6ce <__addsf3+0x20>
 6c0:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 6c4:	20 f0       	brcs	.+8      	; 0x6ce <__addsf3+0x20>
 6c6:	39 f4       	brne	.+14     	; 0x6d6 <__addsf3+0x28>
 6c8:	9f 3f       	cpi	r25, 0xFF	; 255
 6ca:	19 f4       	brne	.+6      	; 0x6d2 <__addsf3+0x24>
 6cc:	26 f4       	brtc	.+8      	; 0x6d6 <__addsf3+0x28>
 6ce:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>
 6d2:	0e f4       	brtc	.+2      	; 0x6d6 <__addsf3+0x28>
 6d4:	e0 95       	com	r30
 6d6:	e7 fb       	bst	r30, 7
 6d8:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>

000006dc <__addsf3x>:
 6dc:	e9 2f       	mov	r30, r25
 6de:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 6e2:	58 f3       	brcs	.-42     	; 0x6ba <__addsf3+0xc>
 6e4:	ba 17       	cp	r27, r26
 6e6:	62 07       	cpc	r22, r18
 6e8:	73 07       	cpc	r23, r19
 6ea:	84 07       	cpc	r24, r20
 6ec:	95 07       	cpc	r25, r21
 6ee:	20 f0       	brcs	.+8      	; 0x6f8 <__addsf3x+0x1c>
 6f0:	79 f4       	brne	.+30     	; 0x710 <__addsf3x+0x34>
 6f2:	a6 f5       	brtc	.+104    	; 0x75c <__addsf3x+0x80>
 6f4:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_zero>
 6f8:	0e f4       	brtc	.+2      	; 0x6fc <__addsf3x+0x20>
 6fa:	e0 95       	com	r30
 6fc:	0b 2e       	mov	r0, r27
 6fe:	ba 2f       	mov	r27, r26
 700:	a0 2d       	mov	r26, r0
 702:	0b 01       	movw	r0, r22
 704:	b9 01       	movw	r22, r18
 706:	90 01       	movw	r18, r0
 708:	0c 01       	movw	r0, r24
 70a:	ca 01       	movw	r24, r20
 70c:	a0 01       	movw	r20, r0
 70e:	11 24       	eor	r1, r1
 710:	ff 27       	eor	r31, r31
 712:	59 1b       	sub	r21, r25
 714:	99 f0       	breq	.+38     	; 0x73c <__addsf3x+0x60>
 716:	59 3f       	cpi	r21, 0xF9	; 249
 718:	50 f4       	brcc	.+20     	; 0x72e <__addsf3x+0x52>
 71a:	50 3e       	cpi	r21, 0xE0	; 224
 71c:	68 f1       	brcs	.+90     	; 0x778 <__addsf3x+0x9c>
 71e:	1a 16       	cp	r1, r26
 720:	f0 40       	sbci	r31, 0x00	; 0
 722:	a2 2f       	mov	r26, r18
 724:	23 2f       	mov	r18, r19
 726:	34 2f       	mov	r19, r20
 728:	44 27       	eor	r20, r20
 72a:	58 5f       	subi	r21, 0xF8	; 248
 72c:	f3 cf       	rjmp	.-26     	; 0x714 <__addsf3x+0x38>
 72e:	46 95       	lsr	r20
 730:	37 95       	ror	r19
 732:	27 95       	ror	r18
 734:	a7 95       	ror	r26
 736:	f0 40       	sbci	r31, 0x00	; 0
 738:	53 95       	inc	r21
 73a:	c9 f7       	brne	.-14     	; 0x72e <__addsf3x+0x52>
 73c:	7e f4       	brtc	.+30     	; 0x75c <__addsf3x+0x80>
 73e:	1f 16       	cp	r1, r31
 740:	ba 0b       	sbc	r27, r26
 742:	62 0b       	sbc	r22, r18
 744:	73 0b       	sbc	r23, r19
 746:	84 0b       	sbc	r24, r20
 748:	ba f0       	brmi	.+46     	; 0x778 <__addsf3x+0x9c>
 74a:	91 50       	subi	r25, 0x01	; 1
 74c:	a1 f0       	breq	.+40     	; 0x776 <__addsf3x+0x9a>
 74e:	ff 0f       	add	r31, r31
 750:	bb 1f       	adc	r27, r27
 752:	66 1f       	adc	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	c2 f7       	brpl	.-16     	; 0x74a <__addsf3x+0x6e>
 75a:	0e c0       	rjmp	.+28     	; 0x778 <__addsf3x+0x9c>
 75c:	ba 0f       	add	r27, r26
 75e:	62 1f       	adc	r22, r18
 760:	73 1f       	adc	r23, r19
 762:	84 1f       	adc	r24, r20
 764:	48 f4       	brcc	.+18     	; 0x778 <__addsf3x+0x9c>
 766:	87 95       	ror	r24
 768:	77 95       	ror	r23
 76a:	67 95       	ror	r22
 76c:	b7 95       	ror	r27
 76e:	f7 95       	ror	r31
 770:	9e 3f       	cpi	r25, 0xFE	; 254
 772:	08 f0       	brcs	.+2      	; 0x776 <__addsf3x+0x9a>
 774:	b0 cf       	rjmp	.-160    	; 0x6d6 <__addsf3+0x28>
 776:	93 95       	inc	r25
 778:	88 0f       	add	r24, r24
 77a:	08 f0       	brcs	.+2      	; 0x77e <__addsf3x+0xa2>
 77c:	99 27       	eor	r25, r25
 77e:	ee 0f       	add	r30, r30
 780:	97 95       	ror	r25
 782:	87 95       	ror	r24
 784:	08 95       	ret

00000786 <__divsf3>:
 786:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__divsf3x>
 78a:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 78e:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 792:	58 f0       	brcs	.+22     	; 0x7aa <__divsf3+0x24>
 794:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 798:	40 f0       	brcs	.+16     	; 0x7aa <__divsf3+0x24>
 79a:	29 f4       	brne	.+10     	; 0x7a6 <__divsf3+0x20>
 79c:	5f 3f       	cpi	r21, 0xFF	; 255
 79e:	29 f0       	breq	.+10     	; 0x7aa <__divsf3+0x24>
 7a0:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 7a4:	51 11       	cpse	r21, r1
 7a6:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 7aa:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>

000007ae <__divsf3x>:
 7ae:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 7b2:	68 f3       	brcs	.-38     	; 0x78e <__divsf3+0x8>

000007b4 <__divsf3_pse>:
 7b4:	99 23       	and	r25, r25
 7b6:	b1 f3       	breq	.-20     	; 0x7a4 <__divsf3+0x1e>
 7b8:	55 23       	and	r21, r21
 7ba:	91 f3       	breq	.-28     	; 0x7a0 <__divsf3+0x1a>
 7bc:	95 1b       	sub	r25, r21
 7be:	55 0b       	sbc	r21, r21
 7c0:	bb 27       	eor	r27, r27
 7c2:	aa 27       	eor	r26, r26
 7c4:	62 17       	cp	r22, r18
 7c6:	73 07       	cpc	r23, r19
 7c8:	84 07       	cpc	r24, r20
 7ca:	38 f0       	brcs	.+14     	; 0x7da <__divsf3_pse+0x26>
 7cc:	9f 5f       	subi	r25, 0xFF	; 255
 7ce:	5f 4f       	sbci	r21, 0xFF	; 255
 7d0:	22 0f       	add	r18, r18
 7d2:	33 1f       	adc	r19, r19
 7d4:	44 1f       	adc	r20, r20
 7d6:	aa 1f       	adc	r26, r26
 7d8:	a9 f3       	breq	.-22     	; 0x7c4 <__divsf3_pse+0x10>
 7da:	35 d0       	rcall	.+106    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7dc:	0e 2e       	mov	r0, r30
 7de:	3a f0       	brmi	.+14     	; 0x7ee <__divsf3_pse+0x3a>
 7e0:	e0 e8       	ldi	r30, 0x80	; 128
 7e2:	32 d0       	rcall	.+100    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7e4:	91 50       	subi	r25, 0x01	; 1
 7e6:	50 40       	sbci	r21, 0x00	; 0
 7e8:	e6 95       	lsr	r30
 7ea:	00 1c       	adc	r0, r0
 7ec:	ca f7       	brpl	.-14     	; 0x7e0 <__divsf3_pse+0x2c>
 7ee:	2b d0       	rcall	.+86     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7f0:	fe 2f       	mov	r31, r30
 7f2:	29 d0       	rcall	.+82     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7f4:	66 0f       	add	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	88 1f       	adc	r24, r24
 7fa:	bb 1f       	adc	r27, r27
 7fc:	26 17       	cp	r18, r22
 7fe:	37 07       	cpc	r19, r23
 800:	48 07       	cpc	r20, r24
 802:	ab 07       	cpc	r26, r27
 804:	b0 e8       	ldi	r27, 0x80	; 128
 806:	09 f0       	breq	.+2      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 808:	bb 0b       	sbc	r27, r27
 80a:	80 2d       	mov	r24, r0
 80c:	bf 01       	movw	r22, r30
 80e:	ff 27       	eor	r31, r31
 810:	93 58       	subi	r25, 0x83	; 131
 812:	5f 4f       	sbci	r21, 0xFF	; 255
 814:	3a f0       	brmi	.+14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 816:	9e 3f       	cpi	r25, 0xFE	; 254
 818:	51 05       	cpc	r21, r1
 81a:	78 f0       	brcs	.+30     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 81c:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 820:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 824:	5f 3f       	cpi	r21, 0xFF	; 255
 826:	e4 f3       	brlt	.-8      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 828:	98 3e       	cpi	r25, 0xE8	; 232
 82a:	d4 f3       	brlt	.-12     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 82c:	86 95       	lsr	r24
 82e:	77 95       	ror	r23
 830:	67 95       	ror	r22
 832:	b7 95       	ror	r27
 834:	f7 95       	ror	r31
 836:	9f 5f       	subi	r25, 0xFF	; 255
 838:	c9 f7       	brne	.-14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 83a:	88 0f       	add	r24, r24
 83c:	91 1d       	adc	r25, r1
 83e:	96 95       	lsr	r25
 840:	87 95       	ror	r24
 842:	97 f9       	bld	r25, 7
 844:	08 95       	ret
 846:	e1 e0       	ldi	r30, 0x01	; 1
 848:	66 0f       	add	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	bb 1f       	adc	r27, r27
 850:	62 17       	cp	r22, r18
 852:	73 07       	cpc	r23, r19
 854:	84 07       	cpc	r24, r20
 856:	ba 07       	cpc	r27, r26
 858:	20 f0       	brcs	.+8      	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 85a:	62 1b       	sub	r22, r18
 85c:	73 0b       	sbc	r23, r19
 85e:	84 0b       	sbc	r24, r20
 860:	ba 0b       	sbc	r27, r26
 862:	ee 1f       	adc	r30, r30
 864:	88 f7       	brcc	.-30     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 866:	e0 95       	com	r30
 868:	08 95       	ret

0000086a <__fixunssfsi>:
 86a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_splitA>
 86e:	88 f0       	brcs	.+34     	; 0x892 <__fixunssfsi+0x28>
 870:	9f 57       	subi	r25, 0x7F	; 127
 872:	98 f0       	brcs	.+38     	; 0x89a <__fixunssfsi+0x30>
 874:	b9 2f       	mov	r27, r25
 876:	99 27       	eor	r25, r25
 878:	b7 51       	subi	r27, 0x17	; 23
 87a:	b0 f0       	brcs	.+44     	; 0x8a8 <__fixunssfsi+0x3e>
 87c:	e1 f0       	breq	.+56     	; 0x8b6 <__fixunssfsi+0x4c>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	1a f0       	brmi	.+6      	; 0x88e <__fixunssfsi+0x24>
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__fixunssfsi+0x14>
 88c:	14 c0       	rjmp	.+40     	; 0x8b6 <__fixunssfsi+0x4c>
 88e:	b1 30       	cpi	r27, 0x01	; 1
 890:	91 f0       	breq	.+36     	; 0x8b6 <__fixunssfsi+0x4c>
 892:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_zero>
 896:	b1 e0       	ldi	r27, 0x01	; 1
 898:	08 95       	ret
 89a:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_zero>
 89e:	67 2f       	mov	r22, r23
 8a0:	78 2f       	mov	r23, r24
 8a2:	88 27       	eor	r24, r24
 8a4:	b8 5f       	subi	r27, 0xF8	; 248
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <__fixunssfsi+0x4c>
 8a8:	b9 3f       	cpi	r27, 0xF9	; 249
 8aa:	cc f3       	brlt	.-14     	; 0x89e <__fixunssfsi+0x34>
 8ac:	86 95       	lsr	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b3 95       	inc	r27
 8b4:	d9 f7       	brne	.-10     	; 0x8ac <__fixunssfsi+0x42>
 8b6:	3e f4       	brtc	.+14     	; 0x8c6 <__fixunssfsi+0x5c>
 8b8:	90 95       	com	r25
 8ba:	80 95       	com	r24
 8bc:	70 95       	com	r23
 8be:	61 95       	neg	r22
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	8f 4f       	sbci	r24, 0xFF	; 255
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	08 95       	ret

000008c8 <__floatunsisf>:
 8c8:	e8 94       	clt
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <__floatsisf+0x12>

000008cc <__floatsisf>:
 8cc:	97 fb       	bst	r25, 7
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__floatsisf+0x12>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	99 23       	and	r25, r25
 8e0:	a9 f0       	breq	.+42     	; 0x90c <__stack+0xd>
 8e2:	f9 2f       	mov	r31, r25
 8e4:	96 e9       	ldi	r25, 0x96	; 150
 8e6:	bb 27       	eor	r27, r27
 8e8:	93 95       	inc	r25
 8ea:	f6 95       	lsr	r31
 8ec:	87 95       	ror	r24
 8ee:	77 95       	ror	r23
 8f0:	67 95       	ror	r22
 8f2:	b7 95       	ror	r27
 8f4:	f1 11       	cpse	r31, r1
 8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <__floatsisf+0x1c>
 8f8:	fa f4       	brpl	.+62     	; 0x938 <__stack+0x39>
 8fa:	bb 0f       	add	r27, r27
 8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
 8fe:	60 ff       	sbrs	r22, 0
 900:	1b c0       	rjmp	.+54     	; 0x938 <__stack+0x39>
 902:	6f 5f       	subi	r22, 0xFF	; 255
 904:	7f 4f       	sbci	r23, 0xFF	; 255
 906:	8f 4f       	sbci	r24, 0xFF	; 255
 908:	9f 4f       	sbci	r25, 0xFF	; 255
 90a:	16 c0       	rjmp	.+44     	; 0x938 <__stack+0x39>
 90c:	88 23       	and	r24, r24
 90e:	11 f0       	breq	.+4      	; 0x914 <__stack+0x15>
 910:	96 e9       	ldi	r25, 0x96	; 150
 912:	11 c0       	rjmp	.+34     	; 0x936 <__stack+0x37>
 914:	77 23       	and	r23, r23
 916:	21 f0       	breq	.+8      	; 0x920 <__stack+0x21>
 918:	9e e8       	ldi	r25, 0x8E	; 142
 91a:	87 2f       	mov	r24, r23
 91c:	76 2f       	mov	r23, r22
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
 920:	66 23       	and	r22, r22
 922:	71 f0       	breq	.+28     	; 0x940 <__stack+0x41>
 924:	96 e8       	ldi	r25, 0x86	; 134
 926:	86 2f       	mov	r24, r22
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	60 e0       	ldi	r22, 0x00	; 0
 92c:	2a f0       	brmi	.+10     	; 0x938 <__stack+0x39>
 92e:	9a 95       	dec	r25
 930:	66 0f       	add	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	da f7       	brpl	.-10     	; 0x92e <__stack+0x2f>
 938:	88 0f       	add	r24, r24
 93a:	96 95       	lsr	r25
 93c:	87 95       	ror	r24
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__fp_inf>:
 942:	97 f9       	bld	r25, 7
 944:	9f 67       	ori	r25, 0x7F	; 127
 946:	80 e8       	ldi	r24, 0x80	; 128
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	08 95       	ret

0000094e <__fp_nan>:
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	80 ec       	ldi	r24, 0xC0	; 192
 952:	08 95       	ret

00000954 <__fp_pscA>:
 954:	00 24       	eor	r0, r0
 956:	0a 94       	dec	r0
 958:	16 16       	cp	r1, r22
 95a:	17 06       	cpc	r1, r23
 95c:	18 06       	cpc	r1, r24
 95e:	09 06       	cpc	r0, r25
 960:	08 95       	ret

00000962 <__fp_pscB>:
 962:	00 24       	eor	r0, r0
 964:	0a 94       	dec	r0
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	14 06       	cpc	r1, r20
 96c:	05 06       	cpc	r0, r21
 96e:	08 95       	ret

00000970 <__fp_round>:
 970:	09 2e       	mov	r0, r25
 972:	03 94       	inc	r0
 974:	00 0c       	add	r0, r0
 976:	11 f4       	brne	.+4      	; 0x97c <__fp_round+0xc>
 978:	88 23       	and	r24, r24
 97a:	52 f0       	brmi	.+20     	; 0x990 <__fp_round+0x20>
 97c:	bb 0f       	add	r27, r27
 97e:	40 f4       	brcc	.+16     	; 0x990 <__fp_round+0x20>
 980:	bf 2b       	or	r27, r31
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0x18>
 984:	60 ff       	sbrs	r22, 0
 986:	04 c0       	rjmp	.+8      	; 0x990 <__fp_round+0x20>
 988:	6f 5f       	subi	r22, 0xFF	; 255
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	08 95       	ret

00000992 <__fp_split3>:
 992:	57 fd       	sbrc	r21, 7
 994:	90 58       	subi	r25, 0x80	; 128
 996:	44 0f       	add	r20, r20
 998:	55 1f       	adc	r21, r21
 99a:	59 f0       	breq	.+22     	; 0x9b2 <__fp_splitA+0x10>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	71 f0       	breq	.+28     	; 0x9bc <__fp_splitA+0x1a>
 9a0:	47 95       	ror	r20

000009a2 <__fp_splitA>:
 9a2:	88 0f       	add	r24, r24
 9a4:	97 fb       	bst	r25, 7
 9a6:	99 1f       	adc	r25, r25
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <__fp_splitA+0x20>
 9aa:	9f 3f       	cpi	r25, 0xFF	; 255
 9ac:	79 f0       	breq	.+30     	; 0x9cc <__fp_splitA+0x2a>
 9ae:	87 95       	ror	r24
 9b0:	08 95       	ret
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	14 06       	cpc	r1, r20
 9b8:	55 1f       	adc	r21, r21
 9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <__fp_split3+0xe>
 9bc:	46 95       	lsr	r20
 9be:	f1 df       	rcall	.-30     	; 0x9a2 <__fp_splitA>
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__fp_splitA+0x30>
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	18 06       	cpc	r1, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	f1 cf       	rjmp	.-30     	; 0x9ae <__fp_splitA+0xc>
 9cc:	86 95       	lsr	r24
 9ce:	71 05       	cpc	r23, r1
 9d0:	61 05       	cpc	r22, r1
 9d2:	08 94       	sec
 9d4:	08 95       	ret

000009d6 <__fp_zero>:
 9d6:	e8 94       	clt

000009d8 <__fp_szero>:
 9d8:	bb 27       	eor	r27, r27
 9da:	66 27       	eor	r22, r22
 9dc:	77 27       	eor	r23, r23
 9de:	cb 01       	movw	r24, r22
 9e0:	97 f9       	bld	r25, 7
 9e2:	08 95       	ret

000009e4 <__mulsf3>:
 9e4:	0e 94 05 05 	call	0xa0a	; 0xa0a <__mulsf3x>
 9e8:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 9ec:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 9f0:	38 f0       	brcs	.+14     	; 0xa00 <__mulsf3+0x1c>
 9f2:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 9f6:	20 f0       	brcs	.+8      	; 0xa00 <__mulsf3+0x1c>
 9f8:	95 23       	and	r25, r21
 9fa:	11 f0       	breq	.+4      	; 0xa00 <__mulsf3+0x1c>
 9fc:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 a00:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>
 a04:	11 24       	eor	r1, r1
 a06:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>

00000a0a <__mulsf3x>:
 a0a:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 a0e:	70 f3       	brcs	.-36     	; 0x9ec <__mulsf3+0x8>

00000a10 <__mulsf3_pse>:
 a10:	95 9f       	mul	r25, r21
 a12:	c1 f3       	breq	.-16     	; 0xa04 <__mulsf3+0x20>
 a14:	95 0f       	add	r25, r21
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	55 1f       	adc	r21, r21
 a1a:	62 9f       	mul	r22, r18
 a1c:	f0 01       	movw	r30, r0
 a1e:	72 9f       	mul	r23, r18
 a20:	bb 27       	eor	r27, r27
 a22:	f0 0d       	add	r31, r0
 a24:	b1 1d       	adc	r27, r1
 a26:	63 9f       	mul	r22, r19
 a28:	aa 27       	eor	r26, r26
 a2a:	f0 0d       	add	r31, r0
 a2c:	b1 1d       	adc	r27, r1
 a2e:	aa 1f       	adc	r26, r26
 a30:	64 9f       	mul	r22, r20
 a32:	66 27       	eor	r22, r22
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	66 1f       	adc	r22, r22
 a3a:	82 9f       	mul	r24, r18
 a3c:	22 27       	eor	r18, r18
 a3e:	b0 0d       	add	r27, r0
 a40:	a1 1d       	adc	r26, r1
 a42:	62 1f       	adc	r22, r18
 a44:	73 9f       	mul	r23, r19
 a46:	b0 0d       	add	r27, r0
 a48:	a1 1d       	adc	r26, r1
 a4a:	62 1f       	adc	r22, r18
 a4c:	83 9f       	mul	r24, r19
 a4e:	a0 0d       	add	r26, r0
 a50:	61 1d       	adc	r22, r1
 a52:	22 1f       	adc	r18, r18
 a54:	74 9f       	mul	r23, r20
 a56:	33 27       	eor	r19, r19
 a58:	a0 0d       	add	r26, r0
 a5a:	61 1d       	adc	r22, r1
 a5c:	23 1f       	adc	r18, r19
 a5e:	84 9f       	mul	r24, r20
 a60:	60 0d       	add	r22, r0
 a62:	21 1d       	adc	r18, r1
 a64:	82 2f       	mov	r24, r18
 a66:	76 2f       	mov	r23, r22
 a68:	6a 2f       	mov	r22, r26
 a6a:	11 24       	eor	r1, r1
 a6c:	9f 57       	subi	r25, 0x7F	; 127
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	9a f0       	brmi	.+38     	; 0xa98 <__mulsf3_pse+0x88>
 a72:	f1 f0       	breq	.+60     	; 0xab0 <__mulsf3_pse+0xa0>
 a74:	88 23       	and	r24, r24
 a76:	4a f0       	brmi	.+18     	; 0xa8a <__mulsf3_pse+0x7a>
 a78:	ee 0f       	add	r30, r30
 a7a:	ff 1f       	adc	r31, r31
 a7c:	bb 1f       	adc	r27, r27
 a7e:	66 1f       	adc	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	91 50       	subi	r25, 0x01	; 1
 a86:	50 40       	sbci	r21, 0x00	; 0
 a88:	a9 f7       	brne	.-22     	; 0xa74 <__mulsf3_pse+0x64>
 a8a:	9e 3f       	cpi	r25, 0xFE	; 254
 a8c:	51 05       	cpc	r21, r1
 a8e:	80 f0       	brcs	.+32     	; 0xab0 <__mulsf3_pse+0xa0>
 a90:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 a94:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 a98:	5f 3f       	cpi	r21, 0xFF	; 255
 a9a:	e4 f3       	brlt	.-8      	; 0xa94 <__mulsf3_pse+0x84>
 a9c:	98 3e       	cpi	r25, 0xE8	; 232
 a9e:	d4 f3       	brlt	.-12     	; 0xa94 <__mulsf3_pse+0x84>
 aa0:	86 95       	lsr	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f7 95       	ror	r31
 aaa:	e7 95       	ror	r30
 aac:	9f 5f       	subi	r25, 0xFF	; 255
 aae:	c1 f7       	brne	.-16     	; 0xaa0 <__mulsf3_pse+0x90>
 ab0:	fe 2b       	or	r31, r30
 ab2:	88 0f       	add	r24, r24
 ab4:	91 1d       	adc	r25, r1
 ab6:	96 95       	lsr	r25
 ab8:	87 95       	ror	r24
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <__divmodhi4>:
 abe:	97 fb       	bst	r25, 7
 ac0:	07 2e       	mov	r0, r23
 ac2:	16 f4       	brtc	.+4      	; 0xac8 <__divmodhi4+0xa>
 ac4:	00 94       	com	r0
 ac6:	07 d0       	rcall	.+14     	; 0xad6 <__divmodhi4_neg1>
 ac8:	77 fd       	sbrc	r23, 7
 aca:	09 d0       	rcall	.+18     	; 0xade <__divmodhi4_neg2>
 acc:	0e 94 73 05 	call	0xae6	; 0xae6 <__udivmodhi4>
 ad0:	07 fc       	sbrc	r0, 7
 ad2:	05 d0       	rcall	.+10     	; 0xade <__divmodhi4_neg2>
 ad4:	3e f4       	brtc	.+14     	; 0xae4 <__divmodhi4_exit>

00000ad6 <__divmodhi4_neg1>:
 ad6:	90 95       	com	r25
 ad8:	81 95       	neg	r24
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	08 95       	ret

00000ade <__divmodhi4_neg2>:
 ade:	70 95       	com	r23
 ae0:	61 95       	neg	r22
 ae2:	7f 4f       	sbci	r23, 0xFF	; 255

00000ae4 <__divmodhi4_exit>:
 ae4:	08 95       	ret

00000ae6 <__udivmodhi4>:
 ae6:	aa 1b       	sub	r26, r26
 ae8:	bb 1b       	sub	r27, r27
 aea:	51 e1       	ldi	r21, 0x11	; 17
 aec:	07 c0       	rjmp	.+14     	; 0xafc <__udivmodhi4_ep>

00000aee <__udivmodhi4_loop>:
 aee:	aa 1f       	adc	r26, r26
 af0:	bb 1f       	adc	r27, r27
 af2:	a6 17       	cp	r26, r22
 af4:	b7 07       	cpc	r27, r23
 af6:	10 f0       	brcs	.+4      	; 0xafc <__udivmodhi4_ep>
 af8:	a6 1b       	sub	r26, r22
 afa:	b7 0b       	sbc	r27, r23

00000afc <__udivmodhi4_ep>:
 afc:	88 1f       	adc	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	5a 95       	dec	r21
 b02:	a9 f7       	brne	.-22     	; 0xaee <__udivmodhi4_loop>
 b04:	80 95       	com	r24
 b06:	90 95       	com	r25
 b08:	bc 01       	movw	r22, r24
 b0a:	cd 01       	movw	r24, r26
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
