
PreLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000344  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f6  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000400  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d1  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  00001d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ea7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 80 00 	call	0x100	; 0x100 <main>
  88:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
}

//************************************************************
// ISR
//************************************************************
ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	ef 93       	push	r30
  9e:	ff 93       	push	r31
	adcread = ADCH;
  a0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  a4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adcread>
	ADCSRA |= (1<<ADIF);
  a8:	ea e7       	ldi	r30, 0x7A	; 122
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	80 83       	st	Z, r24
}
  b2:	ff 91       	pop	r31
  b4:	ef 91       	pop	r30
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <ADC_init>:
// FUNCIONES
//************************************************************

void ADC_init(){
	// Seleccion de Canal ADC (A)
	ADMUX = 0x07;
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	80 83       	st	Z, r24
	
	// Utilizando AVCC = 5V internos
	ADMUX |= (1<<REFS0);
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  d0:	80 81       	ld	r24, Z
  d2:	8f 77       	andi	r24, 0x7F	; 127
  d4:	80 83       	st	Z, r24
	
	// Justificacion a la Izquierda
	ADMUX |= (1<<ADLAR);
  d6:	80 81       	ld	r24, Z
  d8:	80 62       	ori	r24, 0x20	; 32
  da:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	10 82       	st	Z, r1
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	
	//Habilitamos las interrupciones
	ADCSRA |= (1<<ADIE);
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ee:	80 81       	ld	r24, Z
  f0:	87 60       	ori	r24, 0x07	; 7
  f2:	80 83       	st	Z, r24
	
	DIDR0 |= (1<<ADC0D);
  f4:	ee e7       	ldi	r30, 0x7E	; 126
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <main>:
//************************************************************
// SETUP
//************************************************************
int main(void){
	
	cli();
 100:	f8 94       	cli
	PWMT1FastInitA(invertido, 40);
 102:	68 e2       	ldi	r22, 0x28	; 40
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 9d 00 	call	0x13a	; 0x13a <PWMT1FastInitA>
	PWMT1FastInitB(noinvertido, 40);
 10a:	68 e2       	ldi	r22, 0x28	; 40
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PWMT1FastInitB>
	ADC_init();
 112:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_init>
	
	updateDutyCycleA(50);
 116:	82 e3       	ldi	r24, 0x32	; 50
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 12 01 	call	0x224	; 0x224 <updateDutyCycleA>
	updateDutyCycleB(50);
 11e:	82 e3       	ldi	r24, 0x32	; 50
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 37 01 	call	0x26e	; 0x26e <updateDutyCycleB>
	
	sei();
 126:	78 94       	sei
    while (1) {
		/*servo1 = (20*0xFF)/adcread;
		
		updateDutyCycleA(servo1);*/
		
		updateDutyCycleA(50);
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 12 01 	call	0x224	; 0x224 <updateDutyCycleA>
		updateDutyCycleB(50);
 130:	82 e3       	ldi	r24, 0x32	; 50
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 37 01 	call	0x26e	; 0x26e <updateDutyCycleB>
 138:	f7 cf       	rjmp	.-18     	; 0x128 <main+0x28>

0000013a <PWMT1FastInitA>:



void PWMT1FastInitA(uint8_t inverted, uint8_t freq){
	//Pin Configuration OC1A
	DDRB |= (1<<DDB1);
 13a:	94 b1       	in	r25, 0x04	; 4
 13c:	92 60       	ori	r25, 0x02	; 2
 13e:	94 b9       	out	0x04, r25	; 4
	
	// Configurar el modo de salida PWM
	if (inverted){
 140:	88 23       	and	r24, r24
 142:	31 f0       	breq	.+12     	; 0x150 <PWMT1FastInitA+0x16>
		//Configuracion de modo Invertido
		TCCR1A |= (1<<COM1A1)|(1<<COM1A0); // PWM invertido
 144:	e0 e8       	ldi	r30, 0x80	; 128
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 6c       	ori	r24, 0xC0	; 192
 14c:	80 83       	st	Z, r24
 14e:	08 c0       	rjmp	.+16     	; 0x160 <PWMT1FastInitA+0x26>
	} 
	else{
		//Configuracion de modo No Invertido
		TCCR1A |=  (1<<COM1A1);		// PWM no invertido
 150:	e0 e8       	ldi	r30, 0x80	; 128
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 68       	ori	r24, 0x80	; 128
 158:	80 83       	st	Z, r24
		TCCR1A &= ~(1<<COM1A0);
 15a:	80 81       	ld	r24, Z
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	80 83       	st	Z, r24
	}
	
	
	//Configuracion de Modo Fast PWM, TOP =	ICR1
	TCCR1A |=  (1<<WGM11);
 160:	e0 e8       	ldi	r30, 0x80	; 128
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	82 60       	ori	r24, 0x02	; 2
 168:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM13)|(1<<WGM12); 
 16a:	e1 e8       	ldi	r30, 0x81	; 129
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	88 61       	ori	r24, 0x18	; 24
 172:	80 83       	st	Z, r24
	
	
	//Configuracion de Prescaler 1024
	TCCR1B &= ~(1<<CS11)|(1<<CS10);
 174:	80 81       	ld	r24, Z
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	80 83       	st	Z, r24
	TCCR1B |=  (1<<CS12);
 17a:	80 81       	ld	r24, Z
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	80 83       	st	Z, r24
	
	
	_freq = freq;
 180:	26 2f       	mov	r18, r22
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	ICR1 = (F_CPU/1024/_freq);
 18c:	03 2e       	mov	r0, r19
 18e:	00 0c       	add	r0, r0
 190:	44 0b       	sbc	r20, r20
 192:	55 0b       	sbc	r21, r21
 194:	69 e0       	ldi	r22, 0x09	; 9
 196:	7d e3       	ldi	r23, 0x3D	; 61
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 1a0:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1a4:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1a8:	08 95       	ret

000001aa <PWMT1FastInitB>:
	
}

void PWMT1FastInitB(uint8_t inverted, uint8_t freq){
	//Pin Configuration OC1B
	DDRB |= (1<<DDB2);
 1aa:	94 b1       	in	r25, 0x04	; 4
 1ac:	94 60       	ori	r25, 0x04	; 4
 1ae:	94 b9       	out	0x04, r25	; 4
	
	if (inverted){
 1b0:	88 23       	and	r24, r24
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <PWMT1FastInitB+0x16>
		//Configuracion de modo Invertido
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0);	// PWM invertido
 1b4:	e0 e8       	ldi	r30, 0x80	; 128
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 63       	ori	r24, 0x30	; 48
 1bc:	80 83       	st	Z, r24
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <PWMT1FastInitB+0x26>
		
	} 
	else{
		//Configuracion de modo No Invertido
		TCCR1A |=  (1<<COM1B1); // PWM no invertido
 1c0:	e0 e8       	ldi	r30, 0x80	; 128
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	80 83       	st	Z, r24
		TCCR1A &= ~(1<<COM1B0);
 1ca:	80 81       	ld	r24, Z
 1cc:	8f 7e       	andi	r24, 0xEF	; 239
 1ce:	80 83       	st	Z, r24
	}
	
	
	//Configuracion de Modo Fast PWM, TOP = ICR1
	TCCR1A |=  (1<<WGM13);
 1d0:	e0 e8       	ldi	r30, 0x80	; 128
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	80 83       	st	Z, r24
	TCCR1A |=  (1<<WGM12);
 1da:	80 81       	ld	r24, Z
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	80 83       	st	Z, r24
	TCCR1A |=  (1<<WGM11);
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
	
	//Configuracion de Prescaler 1024
	TCCR1B &= ~((1<<CS11)|(1<<CS10));
 1e6:	e1 e8       	ldi	r30, 0x81	; 129
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	8c 7f       	andi	r24, 0xFC	; 252
 1ee:	80 83       	st	Z, r24
	TCCR1B |=  (1<<CS12);
 1f0:	80 81       	ld	r24, Z
 1f2:	84 60       	ori	r24, 0x04	; 4
 1f4:	80 83       	st	Z, r24
	
	
	_freq = freq;
 1f6:	26 2f       	mov	r18, r22
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1fe:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	ICR1 = (F_CPU/1024/_freq)-1;
 202:	03 2e       	mov	r0, r19
 204:	00 0c       	add	r0, r0
 206:	44 0b       	sbc	r20, r20
 208:	55 0b       	sbc	r21, r21
 20a:	69 e0       	ldi	r22, 0x09	; 9
 20c:	7d e3       	ldi	r23, 0x3D	; 61
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 216:	21 50       	subi	r18, 0x01	; 1
 218:	31 09       	sbc	r19, r1
 21a:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 21e:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 222:	08 95       	ret

00000224 <updateDutyCycleA>:
}

void updateDutyCycleA(int duty){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ec 01       	movw	r28, r24
	OCR1A = (((F_CPU/1024/ _freq) - 1)* duty)/100;
 22a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 232:	03 2e       	mov	r0, r19
 234:	00 0c       	add	r0, r0
 236:	44 0b       	sbc	r20, r20
 238:	55 0b       	sbc	r21, r21
 23a:	69 e0       	ldi	r22, 0x09	; 9
 23c:	7d e3       	ldi	r23, 0x3D	; 61
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 246:	21 50       	subi	r18, 0x01	; 1
 248:	31 09       	sbc	r19, r1
 24a:	41 09       	sbc	r20, r1
 24c:	51 09       	sbc	r21, r1
 24e:	de 01       	movw	r26, r28
 250:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__mulshisi3>
 254:	24 e6       	ldi	r18, 0x64	; 100
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 260:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 264:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <updateDutyCycleB>:

void updateDutyCycleB(int duty){
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	ec 01       	movw	r28, r24
	OCR1B = (((F_CPU/1024/ _freq) - 1)* duty)/100;
 274:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 278:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 27c:	03 2e       	mov	r0, r19
 27e:	00 0c       	add	r0, r0
 280:	44 0b       	sbc	r20, r20
 282:	55 0b       	sbc	r21, r21
 284:	69 e0       	ldi	r22, 0x09	; 9
 286:	7d e3       	ldi	r23, 0x3D	; 61
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 290:	21 50       	subi	r18, 0x01	; 1
 292:	31 09       	sbc	r19, r1
 294:	41 09       	sbc	r20, r1
 296:	51 09       	sbc	r21, r1
 298:	de 01       	movw	r26, r28
 29a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__mulshisi3>
 29e:	24 e6       	ldi	r18, 0x64	; 100
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__udivmodsi4>
 2aa:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2ae:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <__mulshisi3>:
 2fc:	b7 ff       	sbrs	r27, 7
 2fe:	0c 94 86 01 	jmp	0x30c	; 0x30c <__muluhisi3>

00000302 <__mulohisi3>:
 302:	0e 94 86 01 	call	0x30c	; 0x30c <__muluhisi3>
 306:	82 1b       	sub	r24, r18
 308:	93 0b       	sbc	r25, r19
 30a:	08 95       	ret

0000030c <__muluhisi3>:
 30c:	0e 94 91 01 	call	0x322	; 0x322 <__umulhisi3>
 310:	a5 9f       	mul	r26, r21
 312:	90 0d       	add	r25, r0
 314:	b4 9f       	mul	r27, r20
 316:	90 0d       	add	r25, r0
 318:	a4 9f       	mul	r26, r20
 31a:	80 0d       	add	r24, r0
 31c:	91 1d       	adc	r25, r1
 31e:	11 24       	eor	r1, r1
 320:	08 95       	ret

00000322 <__umulhisi3>:
 322:	a2 9f       	mul	r26, r18
 324:	b0 01       	movw	r22, r0
 326:	b3 9f       	mul	r27, r19
 328:	c0 01       	movw	r24, r0
 32a:	a3 9f       	mul	r26, r19
 32c:	70 0d       	add	r23, r0
 32e:	81 1d       	adc	r24, r1
 330:	11 24       	eor	r1, r1
 332:	91 1d       	adc	r25, r1
 334:	b2 9f       	mul	r27, r18
 336:	70 0d       	add	r23, r0
 338:	81 1d       	adc	r24, r1
 33a:	11 24       	eor	r1, r1
 33c:	91 1d       	adc	r25, r1
 33e:	08 95       	ret

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
