
Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d2  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000491  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ef  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   8:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  10:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  14:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  18:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  1c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  20:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  28:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  2c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  30:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  34:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  38:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  44:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  48:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  4c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  50:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  54:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_21>
  58:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  5c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  60:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__bad_interrupt>
  68:	c2 00       	.word	0x00c2	; ????
  6a:	c5 00       	.word	0x00c5	; ????
  6c:	c8 00       	.word	0x00c8	; ????
  6e:	cc 00       	.word	0x00cc	; ????
  70:	d0 00       	.word	0x00d0	; ????
  72:	d4 00       	.word	0x00d4	; ????
  74:	d8 00       	.word	0x00d8	; ????
  76:	dc 00       	.word	0x00dc	; ????
  78:	df 00       	.word	0x00df	; ????
  7a:	e3 00       	.word	0x00e3	; ????
  7c:	e7 00       	.word	0x00e7	; ????
  7e:	eb 00       	.word	0x00eb	; ????
  80:	ef 00       	.word	0x00ef	; ????
  82:	f2 00       	.word	0x00f2	; ????
  84:	f6 00       	.word	0x00f6	; ????
  86:	fa 00       	.word	0x00fa	; ????
  88:	1f 01       	movw	r2, r30
  8a:	22 01       	movw	r4, r4
  8c:	25 01       	movw	r4, r10
  8e:	29 01       	movw	r4, r18
  90:	2d 01       	movw	r4, r26
  92:	31 01       	movw	r6, r2
  94:	35 01       	movw	r6, r10
  96:	39 01       	movw	r6, r18
  98:	3c 01       	movw	r6, r24
  9a:	40 01       	movw	r8, r0
  9c:	44 01       	movw	r8, r8
  9e:	48 01       	movw	r8, r16
  a0:	4c 01       	movw	r8, r24
  a2:	4f 01       	movw	r8, r30
  a4:	53 01       	movw	r10, r6
  a6:	57 01       	movw	r10, r14

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e8 e1       	ldi	r30, 0x18	; 24
  bc:	f3 e0       	ldi	r31, 0x03	; 3
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 31       	cpi	r26, 0x10	; 16
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	a0 e1       	ldi	r26, 0x10	; 16
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
  d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
  d4:	a6 31       	cpi	r26, 0x16	; 22
  d6:	b2 07       	cpc	r27, r18
  d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
  da:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  de:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

000000e2 <__bad_interrupt>:
  e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e6 <ADC_init>:
    }
}

void ADC_init(){
	// Seleccion de Canal ADC0
	ADMUX = 0;
  e6:	ec e7       	ldi	r30, 0x7C	; 124
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	10 82       	st	Z, r1
	
	// Utilizando AVCC = 5V internos
	ADMUX |= (1<<REFS0);
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
  f2:	80 81       	ld	r24, Z
  f4:	8f 77       	andi	r24, 0x7F	; 127
  f6:	80 83       	st	Z, r24
	
	// Justificacion a la Izquierda
	ADMUX |= (1<<ADLAR);
  f8:	80 81       	ld	r24, Z
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	80 83       	st	Z, r24
	
	ADCSRA = 0;
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
	
	ADCSRA |= (1<<ADEN);
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	80 83       	st	Z, r24
	//Habilitamos las interrupciones
	ADCSRA |= (1<<ADIE);
 10a:	80 81       	ld	r24, Z
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	80 83       	st	Z, r24
	
	// Habilitamos el Prescaler de 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 110:	80 81       	ld	r24, Z
 112:	87 60       	ori	r24, 0x07	; 7
 114:	80 83       	st	Z, r24
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
 116:	80 81       	ld	r24, Z
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <main>:
int adcreadL;
int adcreadH;

int main(void)
{
	cli();
 11e:	f8 94       	cli
	DDRC &= ~(1<<DDB0);	// A0 = ADC0 como entrada analogica
 120:	87 b1       	in	r24, 0x07	; 7
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDB1)|(1<<DDB2)|(1<<DDB3)|(1<<DDB4)|(1<<DDB5)|(1<<DDB6);	// PC1 - PC6 como salida
 126:	87 b1       	in	r24, 0x07	; 7
 128:	8e 67       	ori	r24, 0x7E	; 126
 12a:	87 b9       	out	0x07, r24	; 7
	ADC_init();
 12c:	0e 94 73 00 	call	0xe6	; 0xe6 <ADC_init>
	sei();
 130:	78 94       	sei
	
    while (1) 
    {
		ADCSRA |= (1<<ADSC);		// Iniciamos la conversion
 132:	ea e7       	ldi	r30, 0x7A	; 122
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e7       	ldi	r24, 0x7F	; 127
 13e:	9e e3       	ldi	r25, 0x3E	; 62
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x22>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x28>
 146:	00 00       	nop
		_delay_ms(4);
		PORTB |= (1<<PORTB3);		// Encendiendo display 2
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	85 b9       	out	0x05, r24	; 5
		adcreadL = adcread & 0x0F;
 14e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <adcread>
 152:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <adcread+0x1>
 156:	8f 70       	andi	r24, 0x0F	; 15
 158:	99 27       	eor	r25, r25
 15a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 15e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		PORTC = lista[adcreadL];
 162:	fc 01       	movw	r30, r24
 164:	e0 50       	subi	r30, 0x00	; 0
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	80 81       	ld	r24, Z
 16a:	88 b9       	out	0x08, r24	; 8
		switch (adcreadL)
 16c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 170:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <__data_end+0x1>
 174:	e0 31       	cpi	r30, 0x10	; 16
 176:	f1 05       	cpc	r31, r1
 178:	08 f0       	brcs	.+2      	; 0x17c <main+0x5e>
 17a:	3f c0       	rjmp	.+126    	; 0x1fa <main+0xdc>
 17c:	ec 5c       	subi	r30, 0xCC	; 204
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	0c 94 84 01 	jmp	0x308	; 0x308 <__tablejump2__>
		{
			case 0:
			PORTB |= (0<<PORTB5);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	85 b9       	out	0x05, r24	; 5
			break;
 188:	38 c0       	rjmp	.+112    	; 0x1fa <main+0xdc>
			case 1:
			PORTB |= (0<<PORTB5);
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	85 b9       	out	0x05, r24	; 5
			break;
 18e:	35 c0       	rjmp	.+106    	; 0x1fa <main+0xdc>
			case 2:
			PORTB |= (1<<PORTB5);
 190:	85 b1       	in	r24, 0x05	; 5
 192:	80 62       	ori	r24, 0x20	; 32
 194:	85 b9       	out	0x05, r24	; 5
			break;
 196:	31 c0       	rjmp	.+98     	; 0x1fa <main+0xdc>
			case 3:
			PORTB |= (1<<PORTB5);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	80 62       	ori	r24, 0x20	; 32
 19c:	85 b9       	out	0x05, r24	; 5
			break;
 19e:	2d c0       	rjmp	.+90     	; 0x1fa <main+0xdc>
			case 4:
			PORTB |= (1<<PORTB5);
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	85 b9       	out	0x05, r24	; 5
			break;
 1a6:	29 c0       	rjmp	.+82     	; 0x1fa <main+0xdc>
			case 5:
			PORTB |= (1<<PORTB5);
 1a8:	85 b1       	in	r24, 0x05	; 5
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	85 b9       	out	0x05, r24	; 5
			break;
 1ae:	25 c0       	rjmp	.+74     	; 0x1fa <main+0xdc>
			case 6:
			PORTB |= (1<<PORTB5);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	85 b9       	out	0x05, r24	; 5
			break;
 1b6:	21 c0       	rjmp	.+66     	; 0x1fa <main+0xdc>
			case 7:
			PORTB |= (0<<PORTB5);
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	85 b9       	out	0x05, r24	; 5
			break;
 1bc:	1e c0       	rjmp	.+60     	; 0x1fa <main+0xdc>
			case 8:
			PORTB |= (1<<PORTB5);
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	85 b9       	out	0x05, r24	; 5
			break;
 1c4:	1a c0       	rjmp	.+52     	; 0x1fa <main+0xdc>
			case 9:
			PORTB |= (1<<PORTB5);
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	80 62       	ori	r24, 0x20	; 32
 1ca:	85 b9       	out	0x05, r24	; 5
			break;
 1cc:	16 c0       	rjmp	.+44     	; 0x1fa <main+0xdc>
			case 10:
			PORTB |= (1<<PORTB5);
 1ce:	85 b1       	in	r24, 0x05	; 5
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	85 b9       	out	0x05, r24	; 5
			break;
 1d4:	12 c0       	rjmp	.+36     	; 0x1fa <main+0xdc>
			case 11:
			PORTB |= (1<<PORTB5);
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	85 b9       	out	0x05, r24	; 5
			break;
 1dc:	0e c0       	rjmp	.+28     	; 0x1fa <main+0xdc>
			case 12:
			PORTB |= (0<<PORTB5);
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	85 b9       	out	0x05, r24	; 5
			break;
 1e2:	0b c0       	rjmp	.+22     	; 0x1fa <main+0xdc>
			case 13:
			PORTB |= (1<<PORTB5);
 1e4:	85 b1       	in	r24, 0x05	; 5
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	85 b9       	out	0x05, r24	; 5
			break;
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <main+0xdc>
			case 14:
			PORTB |= (1<<PORTB5);
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	85 b9       	out	0x05, r24	; 5
			break;
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <main+0xdc>
			case 15:
			PORTB |= (1<<PORTB5);
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	80 62       	ori	r24, 0x20	; 32
 1f8:	85 b9       	out	0x05, r24	; 5
			break;
		}
		PORTB &= ~(1<<PORTB3);
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	87 7f       	andi	r24, 0xF7	; 247
 1fe:	85 b9       	out	0x05, r24	; 5
 200:	8f e7       	ldi	r24, 0x7F	; 127
 202:	9e e3       	ldi	r25, 0x3E	; 62
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <main+0xe6>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0xec>
 20a:	00 00       	nop

		_delay_ms(4);
		PORTB |= (1<<PORTB2);		// Encendemos display 1
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	85 b9       	out	0x05, r24	; 5
		adcreadH = (adcread>>4) & 0x0F;
 212:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <adcread>
 216:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <adcread+0x1>
 21a:	f5 95       	asr	r31
 21c:	e7 95       	ror	r30
 21e:	f5 95       	asr	r31
 220:	e7 95       	ror	r30
 222:	f5 95       	asr	r31
 224:	e7 95       	ror	r30
 226:	f5 95       	asr	r31
 228:	e7 95       	ror	r30
 22a:	ef 70       	andi	r30, 0x0F	; 15
 22c:	ff 27       	eor	r31, r31
 22e:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <adcreadH+0x1>
 232:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <adcreadH>
		switch (adcreadH)
 236:	ec 5b       	subi	r30, 0xBC	; 188
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	0c 94 84 01 	jmp	0x308	; 0x308 <__tablejump2__>
		{
			case 0:
			PORTB |= (0<<PORTB5);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	85 b9       	out	0x05, r24	; 5
			break;
 242:	38 c0       	rjmp	.+112    	; 0x2b4 <main+0x196>
			case 1:
			PORTB |= (0<<PORTB5);
 244:	85 b1       	in	r24, 0x05	; 5
 246:	85 b9       	out	0x05, r24	; 5
			break;
 248:	35 c0       	rjmp	.+106    	; 0x2b4 <main+0x196>
			case 2:
			PORTB |= (1<<PORTB5);
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	80 62       	ori	r24, 0x20	; 32
 24e:	85 b9       	out	0x05, r24	; 5
			break;
 250:	31 c0       	rjmp	.+98     	; 0x2b4 <main+0x196>
			case 3:
			PORTB |= (1<<PORTB5);
 252:	85 b1       	in	r24, 0x05	; 5
 254:	80 62       	ori	r24, 0x20	; 32
 256:	85 b9       	out	0x05, r24	; 5
			break;
 258:	2d c0       	rjmp	.+90     	; 0x2b4 <main+0x196>
			case 4:
			PORTB |= (1<<PORTB5);
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	85 b9       	out	0x05, r24	; 5
			break;
 260:	29 c0       	rjmp	.+82     	; 0x2b4 <main+0x196>
			case 5:
			PORTB |= (1<<PORTB5);
 262:	85 b1       	in	r24, 0x05	; 5
 264:	80 62       	ori	r24, 0x20	; 32
 266:	85 b9       	out	0x05, r24	; 5
			break;
 268:	25 c0       	rjmp	.+74     	; 0x2b4 <main+0x196>
			case 6:
			PORTB |= (1<<PORTB5);
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	80 62       	ori	r24, 0x20	; 32
 26e:	85 b9       	out	0x05, r24	; 5
			break;
 270:	21 c0       	rjmp	.+66     	; 0x2b4 <main+0x196>
			case 7:
			PORTB |= (0<<PORTB5);
 272:	85 b1       	in	r24, 0x05	; 5
 274:	85 b9       	out	0x05, r24	; 5
			break;
 276:	1e c0       	rjmp	.+60     	; 0x2b4 <main+0x196>
			case 8:
			PORTB |= (1<<PORTB5);
 278:	85 b1       	in	r24, 0x05	; 5
 27a:	80 62       	ori	r24, 0x20	; 32
 27c:	85 b9       	out	0x05, r24	; 5
			break;
 27e:	1a c0       	rjmp	.+52     	; 0x2b4 <main+0x196>
			case 9:
			PORTB |= (1<<PORTB5);
 280:	85 b1       	in	r24, 0x05	; 5
 282:	80 62       	ori	r24, 0x20	; 32
 284:	85 b9       	out	0x05, r24	; 5
			break;
 286:	16 c0       	rjmp	.+44     	; 0x2b4 <main+0x196>
			case 10:
			PORTB |= (1<<PORTB5);
 288:	85 b1       	in	r24, 0x05	; 5
 28a:	80 62       	ori	r24, 0x20	; 32
 28c:	85 b9       	out	0x05, r24	; 5
			break;
 28e:	12 c0       	rjmp	.+36     	; 0x2b4 <main+0x196>
			case 11:
			PORTB |= (1<<PORTB5);
 290:	85 b1       	in	r24, 0x05	; 5
 292:	80 62       	ori	r24, 0x20	; 32
 294:	85 b9       	out	0x05, r24	; 5
			break;
 296:	0e c0       	rjmp	.+28     	; 0x2b4 <main+0x196>
			case 12:
			PORTB |= (0<<PORTB5);
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	85 b9       	out	0x05, r24	; 5
			break;
 29c:	0b c0       	rjmp	.+22     	; 0x2b4 <main+0x196>
			case 13:
			PORTB |= (1<<PORTB5);
 29e:	85 b1       	in	r24, 0x05	; 5
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	85 b9       	out	0x05, r24	; 5
			break;
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <main+0x196>
			case 14:
			PORTB |= (1<<PORTB5);
 2a6:	85 b1       	in	r24, 0x05	; 5
 2a8:	80 62       	ori	r24, 0x20	; 32
 2aa:	85 b9       	out	0x05, r24	; 5
			break;
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <main+0x196>
			case 15:
			PORTB |= (1<<PORTB5);
 2ae:	85 b1       	in	r24, 0x05	; 5
 2b0:	80 62       	ori	r24, 0x20	; 32
 2b2:	85 b9       	out	0x05, r24	; 5
			break;
		}

		PORTC = lista[adcreadH];
 2b4:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <adcreadH>
 2b8:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <adcreadH+0x1>
 2bc:	e0 50       	subi	r30, 0x00	; 0
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	80 81       	ld	r24, Z
 2c2:	88 b9       	out	0x08, r24	; 8
		PORTB &= ~(1<<PORTB2);
 2c4:	85 b1       	in	r24, 0x05	; 5
 2c6:	8b 7f       	andi	r24, 0xFB	; 251
 2c8:	85 b9       	out	0x05, r24	; 5
		
    }
 2ca:	33 cf       	rjmp	.-410    	; 0x132 <main+0x14>

000002cc <__vector_21>:
	
	// Habilitando el ADC
	ADCSRA |= (1<<ADEN);
}

ISR(ADC_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	adcread = ADCH;		// Guardamos el valor 
 2de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <adcread+0x1>
 2e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <adcread>
	ADCSRA |= (1<<ADIF);		// Apagamos bandera de interrupcion
 2ec:	ea e7       	ldi	r30, 0x7A	; 122
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	80 61       	ori	r24, 0x10	; 16
 2f4:	80 83       	st	Z, r24
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__tablejump2__>:
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	05 90       	lpm	r0, Z+
 30e:	f4 91       	lpm	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	09 94       	ijmp

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
