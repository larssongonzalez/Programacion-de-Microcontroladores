
Prelab4.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000747  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
    uint8_t contador;
    
    // Boton de Incremento
    DDRB &= ~(1<<DDB1);		// PB1 como entrada
  80:	84 b1       	in	r24, 0x04	; 4
  82:	8d 7f       	andi	r24, 0xFD	; 253
  84:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PORTB1);	// Activamos Pull-Up
  86:	85 b1       	in	r24, 0x05	; 5
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	85 b9       	out	0x05, r24	; 5
    
    // Boton de Decremento
    DDRB &= ~(1<<DDB2);		// PB2 como entrada
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	8b 7f       	andi	r24, 0xFB	; 251
  90:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PORTB2);	// Activamos Pull-Up
  92:	85 b1       	in	r24, 0x05	; 5
  94:	84 60       	ori	r24, 0x04	; 4
  96:	85 b9       	out	0x05, r24	; 5
    
    DDRD = 0xFF;				// Puerto D como salida
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	8a b9       	out	0x0a, r24	; 10
    
    contador = 0;
  9c:	80 e0       	ldi	r24, 0x00	; 0
	
    while (1) 
    {
		if (!(PINB & (1<<PINB1)))
  9e:	19 99       	sbic	0x03, 1	; 3
  a0:	0d c0       	rjmp	.+26     	; 0xbc <main+0x3c>
		{
			if (contador < 255)
  a2:	8f 3f       	cpi	r24, 0xFF	; 255
  a4:	11 f0       	breq	.+4      	; 0xaa <main+0x2a>
			{
				contador = contador + 1;
  a6:	8f 5f       	subi	r24, 0xFF	; 255
				PORTD = contador;	
  a8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	34 e3       	ldi	r19, 0x34	; 52
  ae:	9c e0       	ldi	r25, 0x0C	; 12
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	30 40       	sbci	r19, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x3a>
  ba:	00 00       	nop
			}
			_delay_ms(250);
		}
		if (!(PINB & (1<<PINB2)))
  bc:	1a 99       	sbic	0x03, 2	; 3
  be:	ef cf       	rjmp	.-34     	; 0x9e <main+0x1e>
		{
			if (contador > 0)
  c0:	88 23       	and	r24, r24
  c2:	11 f0       	breq	.+4      	; 0xc8 <main+0x48>
			{
				contador = contador -1;
  c4:	81 50       	subi	r24, 0x01	; 1
				PORTD = contador;
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	34 e3       	ldi	r19, 0x34	; 52
  cc:	9c e0       	ldi	r25, 0x0C	; 12
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	30 40       	sbci	r19, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
  da:	e1 cf       	rjmp	.-62     	; 0x9e <main+0x1e>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
