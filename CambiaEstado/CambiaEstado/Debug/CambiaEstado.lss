
CambiaEstado.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a9  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000299  00000000  00000000  00000f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035a  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_5>:
#include <avr/interrupt.h>


volatile int state = 0;

ISR(PCINT2_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	if (!(PIND & (1<<PIND4)))
  9e:	4c 99       	sbic	0x09, 4	; 9
  a0:	14 c0       	rjmp	.+40     	; 0xca <__vector_5+0x3a>
	{
		if (state < 2)
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  aa:	02 97       	sbiw	r24, 0x02	; 2
  ac:	54 f4       	brge	.+20     	; 0xc2 <__vector_5+0x32>
		{
			state++;
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	04 c0       	rjmp	.+8      	; 0xca <__vector_5+0x3a>
		} else {
			state = 0;
  c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:


int main(void)
{
	cli();
  d8:	f8 94       	cli
	
	// Configura el boton como entrada
	DDRD &= ~(1<<DDD4);		//Pin PD4 como entrada
  da:	8a b1       	in	r24, 0x0a	; 10
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1<<PORTD4);	// Habilita Pull-Up
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	8b b9       	out	0x0b, r24	; 11
	
	//Configura los leds como salida
	DDRB |= (1 << DDB4); // Pin PB4 como salida
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	84 b9       	out	0x04, r24	; 4
	//PORTB &= ~(1<<PORTB4);	// Inicia apagado
	DDRB |= (1<<DDB0);	// Pin PB0 como salida
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	84 b9       	out	0x04, r24	; 4
	//PORTB &= ~(1<<PORTB0);	// Pin PB0 como salida
	DDRD |= (1<<DDD7);	// Pin PD7 como salida
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8a b9       	out	0x0a, r24	; 10
	//PORTD &= (1<<PORTD7);
	
	// Configura la interrupcion PCINT2
	PCICR |= (1 << PCIE2);			    // Habilita la interrupcion PCINT2
  f8:	e8 e6       	ldi	r30, 0x68	; 104
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	84 60       	ori	r24, 0x04	; 4
 100:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT20);          // Habilita PCINT20 (PD4)
 102:	ed e6       	ldi	r30, 0x6D	; 109
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 61       	ori	r24, 0x10	; 16
 10a:	80 83       	st	Z, r24
	/*PORTB |= (1 << PORTB4); // Enciende el LED
	PORTD &= ~(1 << PORTB0); // Apaga el LED
	PORTD &= ~(1 << PORTD7); // Apaga el LED*/
	
	
	sei();
 10c:	78 94       	sei
	
    while (1) 
    {
		if (state == 0)
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	89 2b       	or	r24, r25
 118:	51 f4       	brne	.+20     	; 0x12e <main+0x56>
		{
			PORTB |= (1<<PORTB4);
 11a:	85 b1       	in	r24, 0x05	; 5
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<PORTB0);
 120:	85 b1       	in	r24, 0x05	; 5
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1<<PORTD7);
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8f 77       	andi	r24, 0x7F	; 127
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	f0 cf       	rjmp	.-32     	; 0x10e <main+0x36>
			
		} else if (state == 1)
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	51 f4       	brne	.+20     	; 0x14e <main+0x76>
		{
			PORTD &= ~(1<<PORTD7);
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 77       	andi	r24, 0x7F	; 127
 13e:	8b b9       	out	0x0b, r24	; 11
			PORTB &= ~(1<<PORTB4);
 140:	85 b1       	in	r24, 0x05	; 5
 142:	8f 7e       	andi	r24, 0xEF	; 239
 144:	85 b9       	out	0x05, r24	; 5
			PORTB |= (1<<PORTB0);
 146:	85 b1       	in	r24, 0x05	; 5
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	e0 cf       	rjmp	.-64     	; 0x10e <main+0x36>
		
		} else if (state == 2)
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	02 97       	sbiw	r24, 0x02	; 2
 158:	51 f4       	brne	.+20     	; 0x16e <main+0x96>
		{
			PORTB &= ~(1<<PORTB4);
 15a:	85 b1       	in	r24, 0x05	; 5
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<PORTB0);
 160:	85 b1       	in	r24, 0x05	; 5
 162:	8e 7f       	andi	r24, 0xFE	; 254
 164:	85 b9       	out	0x05, r24	; 5
			PORTD |= (1<<PORTD7);
 166:	8b b1       	in	r24, 0x0b	; 11
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	8b b9       	out	0x0b, r24	; 11
 16c:	d0 cf       	rjmp	.-96     	; 0x10e <main+0x36>
		
		} else if (state == 3)
 16e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 172:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 176:	03 97       	sbiw	r24, 0x03	; 3
 178:	51 f6       	brne	.-108    	; 0x10e <main+0x36>
		{
			PORTB &= ~(1<<PORTB4);
 17a:	85 b1       	in	r24, 0x05	; 5
 17c:	8f 7e       	andi	r24, 0xEF	; 239
 17e:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(1<<PORTB0);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	85 b9       	out	0x05, r24	; 5
			PORTD &= ~(1<<PORTD7);
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 77       	andi	r24, 0x7F	; 127
 18a:	8b b9       	out	0x0b, r24	; 11
			state = 0;
 18c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 190:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 194:	bc cf       	rjmp	.-136    	; 0x10e <main+0x36>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
