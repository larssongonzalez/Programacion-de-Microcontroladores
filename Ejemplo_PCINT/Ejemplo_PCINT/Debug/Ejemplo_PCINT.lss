
Ejemplo_PCINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000017e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a4  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000024b  00000000  00000000  00000edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035f  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t contador;


int main(void)
{
	cli();
  90:	f8 94       	cli
	
    DDRB &= ~(1<<DDB0);	// PB0 como entrada
  92:	84 b1       	in	r24, 0x04	; 4
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB0);	// Activamos Pull-Up
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 b9       	out	0x05, r24	; 5
	
	DDRB &= ~(1<<DDB1);	// PB1 como entrada
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	8d 7f       	andi	r24, 0xFD	; 253
  a2:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PORTB1);	// Activamos Pull-Up
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	85 b9       	out	0x05, r24	; 5
	
	DDRD = 0b11111111;	// Puerto D como salida
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a b9       	out	0x0a, r24	; 10
	
	// Configuracion de interrupcion PCINT
	PCMSK0 |= (1<<PCINT0)|(1<<PCINT1);
  ae:	eb e6       	ldi	r30, 0x6B	; 107
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE0);	// Habilita Interrupcion PCINT en el puerto B
  b8:	e8 e6       	ldi	r30, 0x68	; 104
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
		
	sei();
  c2:	78 94       	sei
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x34>

000000c6 <__vector_3>:
    }
}



ISR(PCINT0_vect){
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
	if (!(PINB & (1<<PINB0)))
  d2:	18 99       	sbic	0x03, 0	; 3
  d4:	08 c0       	rjmp	.+16     	; 0xe6 <__vector_3+0x20>
	{
		if (contador < 255)
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	21 f0       	breq	.+8      	; 0xe6 <__vector_3+0x20>
		{
			contador = contador + 1;
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = contador;
  e4:	8b b9       	out	0x0b, r24	; 11
		}
	}
	
	if (!(PINB & (1<<PINB1)))
  e6:	19 99       	sbic	0x03, 1	; 3
  e8:	08 c0       	rjmp	.+16     	; 0xfa <__vector_3+0x34>
	{
		if (contador > 0)
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	88 23       	and	r24, r24
  f0:	21 f0       	breq	.+8      	; 0xfa <__vector_3+0x34>
		{
			contador = contador - 1;
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD = contador;
  f8:	8b b9       	out	0x0b, r24	; 11
		}
	}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
